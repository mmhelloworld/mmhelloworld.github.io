<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Frege | mmhelloworld]]></title>
  <link href="http://mmhelloworld.github.io/blog/categories/frege/atom.xml" rel="self"/>
  <link href="http://mmhelloworld.github.io/"/>
  <updated>2017-09-17T18:11:27-04:00</updated>
  <id>http://mmhelloworld.github.io/</id>
  <author>
    <name><![CDATA[Marimuthu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frege: Record accessors and mutators]]></title>
    <link href="http://mmhelloworld.github.io/blog/2014/03/15/frege-record-accessors-and-mutators/"/>
    <updated>2014-03-15T20:41:00-04:00</updated>
    <id>http://mmhelloworld.github.io/blog/2014/03/15/frege-record-accessors-and-mutators</id>
    <content type="html"><![CDATA[<p>Frege has built-in mechanism to access and mutate (non-destructive) record fields.</p>

<p>Consider the following type in Frege:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="ow">::</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can use the following functions to get and set record fields:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Int</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Int</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="ow">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Point</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For Field <code>x</code>,</p>

<ol>
<li>The function <code>Point.x</code> is the getter.</li>
<li>The function <code>Point.{x = }</code> is a setter which sets the field <code>x</code> with a new value.</li>
<li>The function <code>Point.{x &lt;- }</code> is also a setter but applies a function to update the current value.</li>
</ol>


<p>We can use the functions like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="nf">value</span> <span class="n">p</span> <span class="ow">::</span> <span class="kt">Point</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span> <span class="n">p</span>
</span><span class='line'><span class="mi">3</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span><span class="p">}</span> <span class="n">p</span> <span class="mi">13</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;}</span> <span class="n">p</span> <span class="p">(</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">18</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Frege also provides some shortcuts to apply these functions:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="kt">Same</span> <span class="n">as</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">Point</span><span class="o">.</span><span class="n">x</span> <span class="n">p</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">10</span><span class="p">}</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="kt">Same</span> <span class="n">as</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="p">}</span> <span class="n">p</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">10</span> <span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;}</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="kt">Same</span> <span class="n">as</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span><span class="p">}</span> <span class="n">p</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="ow">::</span> <span class="p">(</span><span class="kt">Int</span><span class="ow">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="o">+</span><span class="mi">10</span><span class="p">)}</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="kt">Same</span> <span class="n">as</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">}</span> <span class="n">p</span> <span class="p">(</span><span class="o">+</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Multiple updates can be combined:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="o">+</span><span class="mi">8</span><span class="p">),</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">20</span><span class="p">}</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="kt">Increment</span> <span class="n">x</span> <span class="n">by</span> <span class="mi">8</span> <span class="n">and</span> <span class="n">set</span> <span class="n">y</span> <span class="n">to</span> <span class="mi">20</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">11</span> <span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Accessors and updates can be at any level deep.
Let&rsquo;s create another type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">:</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kr">data</span> <span class="kt">Circle</span> <span class="ow">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="ow">::</span> <span class="kt">Point</span><span class="p">,</span> <span class="n">radius</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Circle</span>
</span><span class='line'><span class="kt">:</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Circle</span> <span class="ow">::</span> <span class="o">*</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Circle</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we have an aggregate type <code>Circle</code> which composes another type <code>Point</code> for it&rsquo;s field <code>center</code>.
Now we can update and select fields at different levels:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span> <span class="ow">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">,</span> <span class="n">radius</span> <span class="ow">=</span> <span class="mi">10</span><span class="p">}</span>
</span><span class='line'><span class="nf">value</span> <span class="n">c</span> <span class="ow">::</span> <span class="kt">Circle</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">center</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">8</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">8</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">)},</span> <span class="n">radius</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="o">*</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">25</span><span class="p">)</span> <span class="mi">50</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the latest version, Frege provides syntactic sugar for lambdas using underscores. For example, <code>T.foo</code> can be written
as <code>_.foo</code> if the type can be deduced from the context the lambda is applied. Hence the following two are equivalent.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">25</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kr">_</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">25</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Frege provides another utility to check for a field&rsquo;s existence. This would be useful if we have multiple constructors
with different set of fields.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">:</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kr">data</span> <span class="kt">Point</span> <span class="ow">=</span> <span class="kt">Point2d</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="o">|</span> <span class="kt">Point3d</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">z</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
</span><span class='line'><span class="kt">:</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="ow">::</span> <span class="o">*</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the above code, we have two constructors <code>Point2d</code> and <code>Point3d</code> where the field <code>z</code> exists only for <code>Point3d</code>.
We can check for the existence of field <code>z</code> like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Bool</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="ow">=</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
</span><span class='line'><span class="nf">true</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point2d</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="nf">false</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
</span><span class='line'><span class="nf">value</span> <span class="n">p</span> <span class="ow">::</span> <span class="kt">Point</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
</span><span class='line'><span class="nf">true</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For more details on how these field existence check, accessor and mutator functions are generated for a record type,
here is the link to Frege language reference: <a href="http://www.frege-lang.org/doc/Language.pdf.">http://www.frege-lang.org/doc/Language.pdf.</a></p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frege: Hello Java]]></title>
    <link href="http://mmhelloworld.github.io/blog/2013/07/10/frege-hello-java/"/>
    <updated>2013-07-10T11:00:00-04:00</updated>
    <id>http://mmhelloworld.github.io/blog/2013/07/10/frege-hello-java</id>
    <content type="html"><![CDATA[<p>Here is a small code demonstrating Java interoperability in Frege:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Calling Java from Frege  (HelloJava.fr)</span> <a href='/downloads/code/HelloJava.fr'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="err">hellojava.</span><span class="nn">HelloJava</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">LinkedList</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="kt">LinkedList</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">add</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">get</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span>
</span><span class='line'>        <span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">new</span> <span class="ow">::</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fromFregeList</span> <span class="ow">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fromFregeList</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">new</span> <span class="nb">()</span> <span class="o">&gt;&gt;=</span> <span class="n">loop</span> <span class="n">xs</span> <span class="kr">where</span>
</span><span class='line'>        <span class="n">loop</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">jlist</span> <span class="ow">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">add</span> <span class="n">jlist</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">loop</span> <span class="n">xs</span> <span class="n">jlist</span>
</span><span class='line'>        <span class="n">loop</span> <span class="kt">[]</span> <span class="n">jlist</span> <span class="ow">=</span> <span class="n">return</span> <span class="n">jlist</span>
</span><span class='line'>
</span><span class='line'><span class="nf">plusTop</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class='line'><span class="nf">plusTop</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">return</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">a</span> <span class="o">&lt;*&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Exception</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">Exception</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">Exception</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">NullPointerException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">NullPointerException</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">NullPointerException</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="ow">::</span> <span class="kt">Throwable</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">javaList</span> <span class="ow">&lt;-</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">fromFregeList</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="n">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="s">&quot;Got a null pointer&quot;</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span>
</span><span class='line'>        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="ow">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
</span><span class='line'>        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">exception</span> <span class="ow">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can observe the following things from the above code:</p>

<ol>
<li>Making use of a Java class and its methods</li>
<li>Using a Java object in a Frege function</li>
<li>Using Java Exceptions in functions</li>
<li>Handling Java exceptions</li>
</ol>


<h3>1. Making use of a Java class and its methods:</h3>

<p>If a Java class is pure then without much effort, we can use that class in Frege. For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">Integer</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span> <span class="kr">where</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pure</span>  <span class="n">native</span> <span class="n">abs</span>                                  <span class="ow">::</span> <span class="kt">Integer</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">pure</span>  <span class="n">native</span> <span class="n">negate</span>                               <span class="ow">::</span> <span class="kt">Integer</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">pure</span>  <span class="n">native</span> <span class="n">valueOf</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span><span class="o">.</span><span class="n">valueOf</span> <span class="ow">::</span> <span class="kt">Long</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A Java class is declared with <code>data</code> declaration in Frege. The identifier after the <code>data</code> keyword
is the corresponding type for the Java class in Frege and the qualified Java class is identified after the <code>native</code>
keyword followed by the instance methods, static methods or even some Frege functions not defined in the
original Java class.</p>

<p>An important point here is that the instance methods on BigInteger take Integer as their
first argument which is the <code>this</code> reference on which the methods will be invoked.</p>

<p>Coming back to our original example, here
we are trying to use the mutable Java class <code>java.util.LinkedList</code>.
An obvious difference between this one and the <code>BigInteger</code> example is that the
functions now do not have the <code>pure</code> keyword in front.</p>

<p>The next difference is that the instance methods now cannot take the simple type like <code>LinkedList a</code> as we did for
<code>Integer</code> but the type is now <code>Mutable s (LinkedList a)</code> since it is not a pure function.
If we don&rsquo;t annotate a native function <code>pure</code> and we don&rsquo;t use <code>Mutable</code> to consume or return a mutable Object, it will be a
compilation error. Mutable objects can only be used in <code>ST</code> or <code>IO</code> actions so the return type
must be in ST or IO monad.</p>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html#add(E)">LinkedList.add()</a> method returns a boolean. Since
it is an impure function, it should be used in <code>ST</code> monad. Here the boolean itself is pure so it is just <code>ST s Bool</code>.
Take a look at the third function <code>new</code>, <code>LinkedList</code> constructor. This function is impure and it returns
a mutable object, a new <code>LinkedList</code> instance, so the return type is <code>ST s (Mutable s (LinkedList a))</code> for which the shorthand is <code>STMutable s (LinkedList a)</code>.</p>

<p>Here is an example for a native function not being part of a native
<code>data</code> declaration. This is useful when a native class is already
declared in Frege in some module but the function that we are looking
for is missing in the <code>data</code> declaration.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="ow">::</span> <span class="kt">Throwable</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">String</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here <code>showThrowable</code> is the Frege function name for <code>Throwable.toString()</code>. Since it is an
instance method on <code>Throwable</code>, the first argument is of type
<code>Throwable</code> and then the formal arguments' types (in this case, none) and return type.</p>

<h3>2. Using a Java object in a Frege function</h3>

<p>A native <code>data</code> declaration doesn&rsquo;t have to just contain the native members, it can also have
additional Frege functions.
In our example, the function <code>fromFregeList</code> is not defined in
the Java class but it has been added as an utility function to create a <code>LinkedList</code> from a frege list.
Here again the same rule as in the previous section applies: To return a mutable Java object,
we should use <code>ST s (Mutable s TheJavaType)</code> which is nothing but <code>STMutable s TheJavaType</code>.</p>

<p>In the same way, the <code>plusTop</code> function takes a mutable Java object so the parameter type is
<code>Mutable s (LinkedList Int)</code>. Also since it consumes a mutable type, it must be in <code>ST</code> monad hence
the return type is <code>ST s (Maybe Int)</code> returning an <code>Maybe Int</code> in <code>ST</code>.</p>

<h3>3. Using Java Exceptions in functions</h3>

<p>To use a Java Exception class, it must be first defined in a Frege
module. It is the same as declaring native declaration for a Java class but
additionally we need to derive the <code>Exceptional</code> type class so that the exception can later be handled with
<code>catch</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The exceptions can then be used in native declarations as in <code>get</code> function in our example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">native</span> <span class="n">get</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">Int</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. Handling Java exceptions</h3>

<p>In two ways, we can handle exceptions:</p>

<ol>
<li><p>Using <code>action `catch` handler1 `catch` handler2</code></p>

<p>The type of <code>catch</code> is <code>Exceptional β =&gt; ST γ α -&gt; (β-&gt;ST γ α) -&gt; ST γ α</code>.</p>

<p>Here the <code>action</code> is the code where an exception might be thrown
and the handlers <code>handler1</code> and <code>handler2</code> take an exception and
return another value in <code>ST</code> monad. The infix notation facilitates
adding multiple handlers with better readability. Further here the
<code>handler1</code> must be more specific(in terms of the types of the
exceptions being handled) than <code>handler2</code>. Also note that from <a href="https://github.com/Frege/frege/blob/master/frege/prelude/PreludeIO.fr#L116">Frege standard library</a> with respect to <code>catch</code>:</p>

<blockquote><p><strong>Note</strong> If <em>action</em> is of the form:
   <code>doSomething arg</code>
then, depending on the strictness of <code>doSomething</code> the argument <code>arg</code> may be evaluated
<strong>before</strong> the action is returned. Exceptions (i.e. undefined values)
that occur in the construction of the action do <strong>not</strong> count as
exceptions thrown during execution of it, and hence cannot be catched.</p>

<p>Example:
<code>println (head []) `catch`  ....</code></p>

<p>will not catch the exception that will be thrown when println evaluates</p>

<p>For a remedy, see <code>try</code>.</p></blockquote></li>
<li><p>Using <code>try</code></p>

<p>First, the type: <code>try :: Monad γ =&gt; (α-&gt; γ β) -&gt; α -&gt; γ β</code></p>

<p>Unlike <code>catch</code>, <code>try</code> takes a function that produces a monadic value. If
the function can throw an exception, it must result in an <code>ST</code>
monad which can then be passed to <code>catch</code> to handle those
exceptions. In our example, <code>\xs -&gt; plusTop xs &gt;&gt;= (println . maybe "Got a null pointer"
show)</code> is the function which when applied to a
<code>java.util.LinkedList</code> might throw a <code>NullPointerException</code> or
<code>IndexOutOfBoundsException</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using try </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kt">Got</span> <span class="n">a</span> <span class="n">null</span> <span class="n">pointer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span>
</span><span class='line'>    <span class="n">catch</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="ow">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
</span><span class='line'>    <span class="n">catch</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">((</span><span class="n">exception</span> <span class="ow">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ol>


<p>Since the construction of action is deferred through a lambda
here, <code>try</code> eliminates the issue with <code>catch</code> mentioned in the above note.</p>

<h3>Extending a class or implementing an interface in Frege:</h3>

<p>One thing that is not shown in the example is extending a Java class
or implementing an interface in Frege. Unfortunately both are not possible in Frege
yet. There is a workaround though using a Java class which extends a
class or implements an interface but instead of an implementation on
its own, it just delegates to a Frege function. For example, see
<a href="https://github.com/Frege/frege/blob/master/frege/java/Lang.fr#L89">here</a>
for implementing <code>java.lang.Runnable</code> in Frege using a Java class
<a href="https://github.com/Frege/frege/blob/master/frege/runtime/SwingSupport.java#L56">frege.runtime.SwingSupport</a> which takes a Frege function and then
delegates to it in <code>run</code> method implementation.</p>

<p>This concludes our little experimentation calling Java from Frege. The
other interesting side, calling Frege from Java, is for a
future post.</p>
]]></content>
  </entry>
  
</feed>
