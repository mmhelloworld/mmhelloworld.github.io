<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mmhelloworld]]></title>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2024-07-17T00:30:39-04:00</updated>
  <id>http://localhost:4000/</id>
  <author>
    <name><![CDATA[{"name"=>"Marimuthu Madasamy", "url"=>"https://twitter.com/marimuthum"}]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Idris JVM 0.7.0 Release]]></title>
    <link href="http://localhost:4000/blog/2024/07/15/idris-jvm-0-7-0-release/"/>
    <updated>2024-07-15T20:51:10-04:00</updated>
    <id>http://localhost:4000/blog/2024/07/15/idris-jvm-0-7-0-release</id>
    <content type="html"><![CDATA[<p>Happy to announce <a href="https://github.com/mmhelloworld/idris-jvm/releases/tag/latest">Idris JVM 0.7.0 release</a>.
In addition to enabling Idris 0.7.0 features for the JVM backend, this release also includes:</p>

<ul>
  <li>Exporting Idris functions to Java static methods, instance methods and constructors.</li>
  <li>Exporting Java classes from Idris that can extend other classes and implement Java interfaces.</li>
  <li>Exporting functions and classes with Java annotations including function parameter annotations.</li>
  <li>Exporting type class instances and functions that make use of them to be able to be called from Java.</li>
</ul>

<p>Documentation with examples that demonstrate calling Idris functions from Java: <a href="https://idris-jvm.readthedocs.io/en/latest/ffi/calling-idris-from-java.html">link</a>.</p>

<p>With all of these things, we can now write a complete Spring Boot application in Idris! <a href="https://github.com/mmhelloworld/idris-spring-boot-example/blob/main/src/main/idris/Mmhelloworld/IdrisSpringBootExample/Main.idr">example</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idris 2 Initial Release 0.2.1 for the JVM]]></title>
    <link href="http://localhost:4000/blog/2021/07/24/idris-2-initial-release-0-dot-2-1-for-the-jvm/"/>
    <updated>2021-07-24T10:32:32-04:00</updated>
    <id>http://localhost:4000/blog/2021/07/24/idris-2-initial-release-0-dot-2-1-for-the-jvm</id>
    <content type="html"><![CDATA[<p>There is now an initial version for Idris 2 - 0.2.1 for the JVM. This is compiled from Idris 2 JVM bootstrap version.</p>

<h2 id="changes">Changes:</h2>
<ul>
  <li>Compile initial Idris 2 compiler (0.2.1) with Idris 2 JVM bootstrap version targeting Java 8 bytecode</li>
  <li>Add JVM backend</li>
  <li>Support primitives such as system, IO, network, clock, buffer etc. for JVM backend</li>
  <li>Eliminate tail recursion</li>
  <li>Add debug information such as variable name, file name and line number in bytecode from Idris source</li>
  <li>Compile Idris modules to Java classes at the bytecode level, Idris top level functions to static Java methods and Idris lambdas into Java lambdas with <code class="language-plaintext highlighter-rouge">invokedynamic</code> implementing Java <code class="language-plaintext highlighter-rouge">Function</code> interface.</li>
  <li>Generate bytecode concurrently for modules</li>
  <li>Generate classes with <code class="language-plaintext highlighter-rouge">toString</code> and property getters for Idris constructors</li>
  <li>Infer types to avoid boxing and casting</li>
  <li>Compile Idris list into a Java list</li>
  <li>JVM foreign descriptors supporting static, instance, interface methods and constructor calls</li>
</ul>

<h2 id="to-try-it-out">To try it out:</h2>
<ul>
  <li>Unzip <code class="language-plaintext highlighter-rouge">idris2-jvm-0.2.1-SNAPSHOT-20210720.zip</code> from here https://github.com/mmhelloworld/Idris2/releases/tag/v0.2.1-SNAPSHOT-20210720</li>
  <li>Add <code class="language-plaintext highlighter-rouge">bin</code> directory to <code class="language-plaintext highlighter-rouge">PATH</code> variable</li>
  <li>Copy <code class="language-plaintext highlighter-rouge">.idris2</code> directory containing Idris 0.2.1 packages into your home directory.</li>
</ul>

<h2 id="to-compile-and-run">To compile and run:</h2>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">data</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Leaf</span>
            <span class="o">|</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span>

<span class="n">inorder</span> <span class="o">:</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="n">a</span>
<span class="n">inorder</span> <span class="kt">Leaf</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">inorder</span> <span class="p">(</span><span class="kt">Node</span> <span class="n">left</span> <span class="n">a</span> <span class="n">right</span><span class="p">)</span> <span class="o">=</span> <span class="n">inorder</span> <span class="n">left</span> <span class="o">++</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">++</span> <span class="n">inorder</span> <span class="n">right</span>

<span class="n">tree</span> <span class="o">:</span> <span class="kt">Tree</span> <span class="kt">String</span>
<span class="n">tree</span> <span class="o">=</span> <span class="kt">Node</span>
        <span class="p">(</span><span class="kt">Node</span>
          <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="s">"3"</span> <span class="kt">Leaf</span><span class="p">)</span>
          <span class="s">"+"</span>
          <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="s">"7"</span> <span class="kt">Leaf</span><span class="p">))</span>
        <span class="s">"/"</span>
        <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="s">"2"</span> <span class="kt">Leaf</span><span class="p">)</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">printLn</span> <span class="o">$</span> <span class="n">inorder</span> <span class="n">tree</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>idris2 Main.idr <span class="nt">-o</span> main

<span class="nv">$ </span>java <span class="nt">-jar</span> build/exec/main_app/main.jar
<span class="o">[</span><span class="s2">"3"</span>, <span class="s2">"+"</span>, <span class="s2">"7"</span>, <span class="s2">"/"</span>, <span class="s2">"2"</span><span class="o">]</span>
</code></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idris 2 Bootstrap Compiler on the JVM with a JVM backend]]></title>
    <link href="http://localhost:4000/blog/2020/12/30/idris-2-bootstrap-compiler-on-the-jvm-with-a-jvm-backend/"/>
    <updated>2020-12-30T13:34:21-05:00</updated>
    <id>http://localhost:4000/blog/2020/12/30/idris-2-bootstrap-compiler-on-the-jvm-with-a-jvm-backend</id>
    <content type="html"><![CDATA[<p>I am excited to announce that Idris 2 bootstrap compiler can now run on the JVM along with a JVM backend. Here is a REPL session:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span> <span class="n">idris2</span>
     <span class="n">____</span>    <span class="n">__</span>     <span class="kr">_</span>         <span class="n">___</span>                                           
    <span class="o">/</span>  <span class="kr">_</span><span class="o">/</span><span class="n">___</span><span class="o">/</span> <span class="o">/</span><span class="n">____</span><span class="p">(</span><span class="kr">_</span><span class="p">)</span><span class="n">____</span>   <span class="o">|</span><span class="n">__</span> <span class="nf">\</span>                                          
    <span class="o">/</span> <span class="o">//</span> <span class="n">__</span>  <span class="o">/</span> <span class="n">___</span><span class="o">/</span> <span class="o">/</span> <span class="n">___</span><span class="o">/</span>   <span class="n">__</span><span class="o">/</span> <span class="o">/</span>     <span class="kt">Version</span> <span class="mf">0.1</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="mi">786152</span><span class="n">de1</span>
  <span class="kr">_</span><span class="o">/</span> <span class="o">//</span> <span class="o">/</span><span class="kr">_</span><span class="o">/</span> <span class="o">/</span> <span class="o">/</span>  <span class="o">/</span> <span class="p">(</span><span class="n">__</span>  <span class="p">)</span>   <span class="o">/</span> <span class="n">__</span><span class="o">/</span>      <span class="n">https</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">idris</span><span class="o">-</span><span class="n">lang</span><span class="o">.</span><span class="n">org</span>           
 <span class="o">/</span><span class="n">___</span><span class="o">/\</span><span class="n">__</span><span class="p">,</span><span class="kr">_</span><span class="o">/</span><span class="kr">_</span><span class="o">/</span>  <span class="o">/</span><span class="kr">_</span><span class="o">/</span><span class="n">____</span><span class="o">/</span>   <span class="o">/</span><span class="n">____</span><span class="o">/</span>      <span class="kt">Type</span> <span class="o">:?</span> <span class="n">for</span> <span class="n">help</span>                     

<span class="p">[</span><span class="kt">BOOTSTRAP</span> <span class="kt">VERSION</span><span class="o">:</span> <span class="kt">No</span> <span class="n">longer</span> <span class="n">developed</span><span class="p">,</span> <span class="n">except</span> <span class="n">as</span> <span class="n">a</span> <span class="n">bootstrapping</span> <span class="n">step</span><span class="o">.</span><span class="p">]</span>
<span class="kt">Welcome</span> <span class="n">to</span> <span class="kt">Idris</span> <span class="mi">2</span> <span class="n">on</span> <span class="n">the</span> <span class="kt">JVM</span> <span class="p">(</span><span class="kt">Private</span> <span class="kt">Build</span> <span class="kt">OpenJDK</span> <span class="mi">64</span><span class="o">-</span><span class="kt">Bit</span> <span class="kt">Server</span> <span class="kt">VM</span><span class="p">,</span> <span class="mf">1.8</span><span class="o">.</span><span class="mi">0</span><span class="n">_275</span><span class="p">)</span><span class="o">.</span>  <span class="kt">Enjoy</span> <span class="n">yourself</span><span class="o">!</span>
<span class="kt">Main</span><span class="o">&gt;</span> <span class="s">"hello world"</span>
<span class="s">"hello world"</span>
<span class="kt">Main</span><span class="o">&gt;</span> <span class="n">take</span> <span class="mi">10</span> <span class="p">[</span><span class="mi">25</span><span class="o">..</span><span class="p">]</span>
<span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">]</span>
<span class="kt">Main</span><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">map</span>
<span class="kt">Prelude</span><span class="o">.</span><span class="n">map</span> <span class="o">:</span> <span class="kt">Functor</span> <span class="n">f</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
<span class="kt">Main</span><span class="o">&gt;</span> <span class="o">:</span><span class="n">exec</span> <span class="n">printLn</span> <span class="s">"Hello Idris 2 on the JVM - this is printed from executing JVM bytecode from memory"</span>
<span class="s">"Hello Idris 2 on the JVM - this is printed from executing JVM bytecode from memory"</span>
<span class="kt">Main</span><span class="o">&gt;</span> 
</code></pre></div></div>
<p>You may notice that the banner includes the JVM version that the Idris compiler is running on. Idris 2 for JVM can run on Java 8 or above. Since the compiler itself runs on the JVM, the last <code class="language-plaintext highlighter-rouge">:exec</code> command at line 16 above can directly interpret the generated bytecode on the compiler JVM, and the generated bytecode is loaded from memory without any file system footprint.</p>

<h3 id="to-try-it-out">To try it out</h3>

<p>Prerequisite: Java 8 or above</p>

<ul>
  <li>Extract the zip from <a href="https://github.com/mmhelloworld/Idris2-boot/releases/tag/v0.2.0">here</a></li>
  <li>Add <code class="language-plaintext highlighter-rouge">idris2-boot-jvm/bin</code> from extracted directory to <code class="language-plaintext highlighter-rouge">PATH</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">idris2</code>. That’s all!</li>
</ul>

<h3 id="features">Features</h3>
<ul>
  <li>Eliminate tail recursion using JVM’s GOTO</li>
  <li>Trampoline non-self tail calls</li>
  <li>Support file, directory, array, IORef and buffer primitives.</li>
  <li>Analyse function dependencies to generate bytecode for only used functions from <code class="language-plaintext highlighter-rouge">main</code></li>
  <li>Limited type inference on Idris IR to avoid boxing and typecasting in the generated bytecode</li>
  <li>Static and instance Java FFI method calls.</li>
  <li>Debug information (Idris source file and line numbers) in the bytecode from Idris IR</li>
</ul>

<p>Currently, the goal for this bootstrap compiler is to be able to compile current <a href="https://github.com/idris-lang/Idris2">Idris 2</a> so the items here could definitely be improved a lot and other features may be added to support the absolute minimum for building Idris 2.</p>

<h3 id="example">Example</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">import</span> <span class="nn">System.FFI</span>

<span class="c1">-- Tail call is eliminated with GOTO</span>
<span class="n">sum</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
<span class="n">sum</span> <span class="n">n</span> <span class="o">=</span> <span class="n">go</span> <span class="mi">0</span> <span class="n">n</span> <span class="kr">where</span>
  <span class="n">go</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
  <span class="n">go</span> <span class="n">acc</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">acc</span>
  <span class="n">go</span> <span class="n">acc</span> <span class="n">n</span> <span class="o">=</span> <span class="n">go</span> <span class="p">(</span><span class="n">acc</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">mutual</span>
  <span class="c1">-- Mutually recursive functions are trampolined</span>
  <span class="c1">-- keeping it simple with int instead of Nat which is compiled to Java BigInteger</span>
  <span class="n">isOdd</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
  <span class="n">isOdd</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">False</span>
  <span class="n">isOdd</span> <span class="n">n</span> <span class="o">=</span> <span class="n">isEven</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

  <span class="n">isEven</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
  <span class="n">isEven</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">True</span>
  <span class="n">isEven</span> <span class="n">n</span> <span class="o">=</span> <span class="n">isOdd</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1">-- Java instance method calls</span>
<span class="o">%</span><span class="n">foreign</span> <span class="n">jvm</span> <span class="s">"java/lang/String"</span> <span class="s">".length"</span>
<span class="n">jvmStringLength</span> <span class="o">:</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Int</span>

<span class="c1">-- Java static method calls</span>
<span class="o">%</span><span class="n">foreign</span> <span class="n">jvm</span> <span class="s">"java/lang/Integer"</span> <span class="s">"toBinaryString"</span>
<span class="n">intToBinaryString</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">String</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">printLn</span> <span class="o">$</span> <span class="n">sum</span> <span class="mi">5000</span>
  <span class="n">printLn</span> <span class="o">$</span> <span class="n">isEven</span> <span class="mi">100000</span>
  <span class="n">printLn</span> <span class="o">$</span> <span class="n">intToBinaryString</span> <span class="mi">512</span>
  <span class="n">printLn</span> <span class="o">$</span> <span class="n">jvmStringLength</span> <span class="s">"hello"</span>
</code></pre></div></div>

<h4 id="compile">Compile</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>idris2 Main.idr -o main
</code></pre></div></div>
<p>The classes will be compiled into <code class="language-plaintext highlighter-rouge">build/exec/main_app</code>.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tree build/exec/main_app/
build/exec/main_app/
├── Main.class
├── Prelude
│   ├── $col$col.class
│   ├── Just.class
│   ├── Nil.class
│   ├── Nothing.class
│   ├── Open.class
│   ├── PrefixMinus.class
│   └── Show$spcat$spcPrelude$dotidr$col1260$col1--1284$col1__mkShow.class
├── Prelude.class
└── PrimIO.class

</code></pre></div></div>
<p>It compiles down to three main modules <code class="language-plaintext highlighter-rouge">Main</code>, <code class="language-plaintext highlighter-rouge">Prelude</code> and <code class="language-plaintext highlighter-rouge">PrimIO</code>. Rest of the classes are data classes for Idris constructors like <code class="language-plaintext highlighter-rouge">Just</code>, <code class="language-plaintext highlighter-rouge">Nothing</code>, <code class="language-plaintext highlighter-rouge">Nil</code>, <code class="language-plaintext highlighter-rouge">::</code> etc.</p>

<h4 id="run">Run</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ java -cp /path/to/idris2-boot-jvm/lib/runtime-1.0-SNAPSHOT.jar:build/exec/main_app Main
12502500
True
"1000000000"
5
</code></pre></div></div>
<p>The above example demonstrates tail recursion, mutual recursion, Java FFI instance and static method calls.</p>

<p><code class="language-plaintext highlighter-rouge">sum</code> a tail recursive function, would be compiled into a loop.  Here is the decompiled code for the nested <code class="language-plaintext highlighter-rouge">go</code> function inside <code class="language-plaintext highlighter-rouge">sum</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="n">$nested1201</span><span class="err">$</span><span class="mi">307</span><span class="n">$go</span><span class="o">(</span><span class="nc">Object</span> <span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">,</span> <span class="kt">int</span> <span class="n">arg</span><span class="err">$</span><span class="mi">1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">arg</span><span class="err">$</span><span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">switch</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
                <span class="k">return</span> <span class="n">arg</span><span class="err">$</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="n">arg</span><span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="nc">Prelude</span><span class="o">.++</span><span class="n">_Num__Int</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">1</span><span class="o">,</span> <span class="n">arg</span><span class="err">$</span><span class="mi">2</span><span class="o">);</span>
                <span class="n">arg</span><span class="err">$</span><span class="mi">2</span> <span class="o">=</span> <span class="nc">Prelude</span><span class="o">.--</span><span class="n">_Neg__Int</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>As we can see here, the tail recursive function call is removed in the <code class="language-plaintext highlighter-rouge">default</code> block instead the arguments are updated for next iteration. The loop would continue to run until the base case is reached where the result is returned.</p>

<p>For <code class="language-plaintext highlighter-rouge">isEven</code> and <code class="language-plaintext highlighter-rouge">isOdd</code>, the tail calls would be trampolined using JVM’s <code class="language-plaintext highlighter-rouge">invokedynamic</code>. Here is the decompiled bytecode.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">isOdd</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">createThunk</span><span class="o">(</span><span class="n">isEven</span><span class="o">(</span><span class="nc">Prelude</span><span class="o">.--</span><span class="n">_Neg__Int</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">)));</span>
            <span class="o">};</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">createThunk</span><span class="o">(</span><span class="n">isOdd</span><span class="o">(</span><span class="nc">Prelude</span><span class="o">.--</span><span class="n">_Neg__Int</span><span class="o">(</span><span class="n">arg</span><span class="err">$</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">)));</span>
            <span class="o">};</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>Here since the tail call is not to itself, function call is turned into a thunk which would be eventually unwrapped in a loop.</p>

<p>Now let’s look at FFI calls in the above example. <code class="language-plaintext highlighter-rouge">jvmStringLength</code> function is an example for Java FFI instance method call. It calls <code class="language-plaintext highlighter-rouge">length</code> function on Java’s <code class="language-plaintext highlighter-rouge">java.lang.String</code> instance. Similarly <code class="language-plaintext highlighter-rouge">intToBinaryString</code> calls <code class="language-plaintext highlighter-rouge">toBinaryString</code> static function on class <code class="language-plaintext highlighter-rouge">java.lang.Integer</code>. Function name starting with a dot denotes an instance method call differentiating it from a static method call. Precise types can also be passed explicitly as in the example below with argument types and return type (full code <a href="https://github.com/mmhelloworld/Idris2-boot/blob/master/libs/base/System/File.idr#L37">here</a>).</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">foreign</span> <span class="n">jvm'</span> <span class="n">fileClass</span> <span class="s">"getLine"</span> <span class="n">fileClass</span> <span class="s">"String"</span>
<span class="n">prim__readLine</span> <span class="o">:</span> <span class="kt">FilePtr</span> <span class="o">-&gt;</span> <span class="kt">PrimIO</span> <span class="p">(</span><span class="kt">Ptr</span> <span class="kt">String</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="next-steps">Next steps</h3>
<p>Next step would be to use this bootstrap version to compile current <a href="https://github.com/idris-lang/Idris2">Idris 2</a> and then porting the JVM backend from here which is on Idris 1 to Idris 2 so there are some interesting things ahead to work on. Meanwhile, if anyone gets a chance to use this boostrap JVM version, please share any feedback or any issues <a href="https://github.com/mmhelloworld/idris-jvm/discussions">here</a> that can help while we try to compile mainstream Idris 2 for the JVM. Thank you for reading and happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idris JVM: Automated FFI with null safety and exception handling]]></title>
    <link href="http://localhost:4000/blog/2018/02/11/idris-jvm-automated-ffi-with-null-safety/"/>
    <updated>2018-02-11T00:03:00-05:00</updated>
    <id>http://localhost:4000/blog/2018/02/11/idris-jvm-automated-ffi-with-null-safety</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>Idris JVM backend has supported foreign function calls for some time now. For example, to invoke <code class="language-plaintext highlighter-rouge">parseInt</code> method on 
<code class="language-plaintext highlighter-rouge">java.lang.Integer</code> class,</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">invokeStatic</span> <span class="p">(</span><span class="kt">Class</span> <span class="s">"java/lang/Integer"</span><span class="p">)</span> <span class="s">"parseInt"</span> <span class="p">(</span><span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="kt">Int</span><span class="p">)</span> <span class="s">"234"</span> 
</code></pre></div></div>

<p>Here since the Idris compiler doesn’t know anything about Java’s <code class="language-plaintext highlighter-rouge">Integer</code> class or its <code class="language-plaintext highlighter-rouge">parseInt</code> method, we have to 
explicitly provide the function signature. The function call also has the explicit <code class="language-plaintext highlighter-rouge">Class</code> 
before <code class="language-plaintext highlighter-rouge">java/lang/Integer</code> and the type of invocation <code class="language-plaintext highlighter-rouge">invokeStatic</code>.</p>

<p>Since we are targeting JVM bytecode, JVM has to know whether a method call is a static method call or an interface 
method call or a virtual method call. It would be nice if we don’t have to worry about any of these things and 
just call a FFI function with a class name, method name and the arguments. This is the motivation behind this 
new feature along with some other nice things like null safety, construtor and method overloading resolution 
and exception handling.</p>

<h4 id="maybe-and-either-in-foreign-function-calls">Maybe and Either in foreign function calls</h4>
<p><code class="language-plaintext highlighter-rouge">Maybe</code> type and <code class="language-plaintext highlighter-rouge">Either</code> type can be used in foreign function calls for null safety and exception handling. <code class="language-plaintext highlighter-rouge">Maybe</code> 
type can be used for argument types and return types. <code class="language-plaintext highlighter-rouge">Maybe</code> type used in an argument position will pass <code class="language-plaintext highlighter-rouge">null</code>
to the target foreign function if it is <code class="language-plaintext highlighter-rouge">Nothing</code> or the actual value if it is <code class="language-plaintext highlighter-rouge">Just</code>. Similarly, <code class="language-plaintext highlighter-rouge">Maybe</code> type
used for return type will convert <code class="language-plaintext highlighter-rouge">null</code> returned from foreign function into <code class="language-plaintext highlighter-rouge">Nothing</code> and the non-null value into 
<code class="language-plaintext highlighter-rouge">Just.</code> At the bytecode level, <code class="language-plaintext highlighter-rouge">Maybe</code> wrapper doesn’t exist. It gets compiled down to
<code class="language-plaintext highlighter-rouge">null</code> or the actual value.</p>

<p><code class="language-plaintext highlighter-rouge">Either</code> type can only be used in return types to indicate whether the foreign function can throw exceptions.
At runtime, if the foreign function throws exception, it will be captured in the “left” of type <code class="language-plaintext highlighter-rouge">Throwable</code> or if the
foreign function completes normally, the result will be stored in the “right” of result type. There are functions <code class="language-plaintext highlighter-rouge">try</code>
and <code class="language-plaintext highlighter-rouge">catch</code> to handle exceptions which we will see later in the post.</p>

<h2 id="how-it-works">How it works</h2>
<p>Before we look at some examples, first let’s declare some class names as we are going to use them in multiple places and
we don’t want to duplicate.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stringClass</span><span class="o">:</span> <span class="kt">String</span>
<span class="n">stringClass</span> <span class="o">=</span> <span class="s">"java/lang/String"</span>

<span class="n">listInterface</span><span class="o">:</span> <span class="kt">String</span>
<span class="n">listInterface</span> <span class="o">=</span> <span class="s">"java/util/List"</span>

<span class="n">arrayListClass</span><span class="o">:</span> <span class="kt">String</span>
<span class="n">arrayListClass</span> <span class="o">=</span> <span class="s">"java/util/ArrayList"</span>

<span class="n">collectionInterface</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">collectionInterface</span> <span class="o">=</span> <span class="s">"java/util/Collection"</span>

<span class="n">systemClass</span><span class="o">:</span> <span class="kt">String</span>
<span class="n">systemClass</span> <span class="o">=</span> <span class="s">"java/lang/System"</span>

<span class="n">comparatorClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">comparatorClass</span> <span class="o">=</span> <span class="s">"java/util/Comparator"</span>

<span class="n">pointClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">pointClass</span> <span class="o">=</span> <span class="s">"java/awt/Point"</span>

<span class="n">collectionsClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">collectionsClass</span> <span class="o">=</span> <span class="s">"java/util/Collections"</span>

<span class="n">stringBuilderClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">stringBuilderClass</span> <span class="o">=</span> <span class="s">"java/lang/StringBuilder"</span>

<span class="n">objectsClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">objectsClass</span> <span class="o">=</span> <span class="s">"java/util/Objects"</span>

<span class="n">integerClass</span> <span class="o">:</span> <span class="kt">String</span>
<span class="n">integerClass</span> <span class="o">=</span> <span class="s">"java/lang/Integer"</span>
</code></pre></div></div>

<p>And “import” some methods:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jdkimport</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">systemClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"getProperty"</span><span class="p">,</span> <span class="s">"setProperty"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">stringClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"substring"</span><span class="p">,</span> <span class="s">"CASE_INSENSITIVE_ORDER"</span><span class="p">,</span> <span class="s">"valueOf"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">integerClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"parseInt"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">comparatorClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"compare"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">arrayListClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"&lt;init&gt;"</span><span class="p">,</span> <span class="s">"add"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">listInterface</span><span class="p">,</span> <span class="p">[</span><span class="s">"get"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">collectionsClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"max"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">stringBuilderClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"&lt;init&gt;"</span><span class="p">,</span> <span class="s">"toString"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">objectsClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"toString"</span><span class="p">]),</span>
    <span class="p">(</span><span class="n">pointClass</span><span class="p">,</span> <span class="p">[</span><span class="s">"&lt;init&gt;"</span><span class="p">,</span> <span class="s">"x"</span><span class="p">])</span>
  <span class="p">]</span>
</code></pre></div></div>
<p>Here <code class="language-plaintext highlighter-rouge">jdkimport</code> is just an additional syntax created using Idris syntax extensions. It just calls a type provider
function written in Idris to know about these classes, methods and fields. Note that it imports fields such as
<code class="language-plaintext highlighter-rouge">CASE_INSENSITIVE_ORDER</code>, <code class="language-plaintext highlighter-rouge">x</code> and also constructors in the name of <code class="language-plaintext highlighter-rouge">&lt;init&gt;</code> which is the JVM internal name for 
constructors. The <code class="language-plaintext highlighter-rouge">jdkimport</code> syntax launches a JVM during compilation without any classpath so it basically can import 
all the JDK classes and methods.</p>

<p>There is also another syntax called <code class="language-plaintext highlighter-rouge">jvmimport</code> that can take an additional argument, a command, which could be just the
JVM with correct classpath or could be a build tool that properly sets up the classpath from your project dependencies so
that we can “import” classes and methods from external foreign libraries.</p>

<p>Once the information about JVM classes and methods is collected using type provider, appropriate call site, Idris code
similar to the one in the beginning of the post can be created using Idris elaborator reflection with just class name 
and member name from the user. As a user, we don’t have to know much about these internals, we just need to import classes
and members and can use them without having to explicitly provide foreign types. Now let’s look at some examples on how we can 
actually make FFI calls in the new way.</p>

<h2 id="examples">Examples</h2>
<h4 id="1-safe-static-method-call">1. Safe static method call</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">main</span> <span class="o">:</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">exceptionOrInt</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">integerClass</span> <span class="o">&lt;.&gt;</span> <span class="s">"parseInt"</span><span class="p">)</span> <span class="s">"1234"</span>
  <span class="n">printLn</span> <span class="o">$</span> <span class="n">either</span> <span class="p">(</span><span class="n">const</span> <span class="mi">0</span><span class="p">)</span> <span class="n">id</span> <span class="n">exceptionOrInt</span> 
</code></pre></div></div>
<p>Here the type of <code class="language-plaintext highlighter-rouge">(integerClass &lt;.&gt; "parseInt")</code> is <code class="language-plaintext highlighter-rouge">String -&gt; JVM_IO (Either Throwable Int)</code>. Since the method can throw 
exceptions, it returns an <code class="language-plaintext highlighter-rouge">Either</code>. Here we return <code class="language-plaintext highlighter-rouge">0</code> in case of an exception. Later in the post, we will see a 
detailed example of exception handling. As the method returns an <code class="language-plaintext highlighter-rouge">Int</code> which is a primitive type in JVM, it cannot be 
null and the FFI call already knows that hence the result <code class="language-plaintext highlighter-rouge">Int</code> is not wrapped in a <code class="language-plaintext highlighter-rouge">Maybe</code>. We don’t provide any
explicit type signature for the foreign function. If we try to pass anything other than <code class="language-plaintext highlighter-rouge">String</code> for this foreign
function, it will be a compilation error!</p>

<h4 id="2-unsafe-static-method-call">2. Unsafe static method call</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kr">do</span>
    <span class="n">number</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">integerClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"parseInt"</span><span class="p">)</span> <span class="s">"23"</span>
    <span class="n">printLn</span> <span class="n">number</span>
</code></pre></div></div>
<p>Here we use <code class="language-plaintext highlighter-rouge">&lt;.!&gt;</code> with an <code class="language-plaintext highlighter-rouge">!</code> to indicate an unsafe method call instead of <code class="language-plaintext highlighter-rouge">&lt;.&gt;</code>. There is also <code class="language-plaintext highlighter-rouge">javaUnsafe</code> and <code class="language-plaintext highlighter-rouge">java</code>
if you prefer names to operators. The type of <code class="language-plaintext highlighter-rouge">(integerClass &lt;.!&gt; "parseInt")</code> is <code class="language-plaintext highlighter-rouge">String -&gt; JVM_IO Int</code>. 
Sometimes if we are sure that the foreign function would not return null or throw exceptions, we can use unsafe method 
calls but as the name indicates, it would fail at runtime if null is returned or an exception is thrown.</p>

<h4 id="3-overloading-resolution">3. Overloading resolution</h4>
<p>We can pick which overloaded variant we want to use by passing appropriate types to the foreign function and 
the FFI call will automatically have corresponding types.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printLn</span> <span class="o">!</span><span class="p">((</span><span class="n">stringClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"valueOf(double)"</span><span class="p">)</span> <span class="mf">2.5</span><span class="p">)</span>
<span class="n">printLn</span> <span class="o">!</span><span class="p">((</span><span class="n">stringClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"valueOf(char)"</span><span class="p">)</span> <span class="sc">'H'</span><span class="p">)</span>
</code></pre></div></div>
<p>The first function takes an Idris <code class="language-plaintext highlighter-rouge">Double</code> and the second function takes Idris <code class="language-plaintext highlighter-rouge">Char</code>. The types passed to the foreign
functions to resolve overloading are JVM types.</p>

<h4 id="4-safe-instance-method">4. Safe instance method</h4>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kr">do</span>
    <span class="n">s</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">stringClass</span> <span class="o">&lt;.&gt;</span> <span class="s">"substring(int)"</span><span class="p">)</span> <span class="s">"Foobar"</span> <span class="mi">1</span>
    <span class="n">putStrLn</span> <span class="o">!</span><span class="p">(</span><span class="n">either</span> <span class="n">throw</span> <span class="p">(</span><span class="n">pure</span> <span class="o">.</span> <span class="n">show</span><span class="p">)</span> <span class="n">s</span><span class="p">)</span> 

</code></pre></div></div>
<p>Safe instance method calls are similar to static method calls except that the instance should be passed as the first
argument. Here again, we don’t provide any explicit type signature or the type of method invocation whether it is static or 
instance method but it all works out automatically in a type safe way. Here also we pick a particular overloaded version.</p>

<p>The type of <code class="language-plaintext highlighter-rouge">(stringClass &lt;.&gt; "substring(int)")</code> is <code class="language-plaintext highlighter-rouge">String -&gt; Int -&gt; JVM_IO (Either Throwable (Maybe String))</code>.
Since the return type is <code class="language-plaintext highlighter-rouge">String</code> and it can be null, it is in a <code class="language-plaintext highlighter-rouge">Maybe</code> and the method can throw exceptions so the 
overall type is in <code class="language-plaintext highlighter-rouge">Either</code>.</p>

<h4 id="5-exception-handling">5. Exception handling</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">do</span>
  <span class="n">propValue</span> <span class="o">&lt;-</span> <span class="n">try</span> <span class="p">((</span><span class="n">systemClass</span> <span class="o">&lt;.&gt;</span> <span class="s">"getProperty(?java/lang/String)"</span><span class="p">)</span> <span class="kt">Nothing</span><span class="p">)</span> <span class="p">[</span>
    <span class="p">([</span><span class="n">catch</span> <span class="kt">IllegalArgumentExceptionClass</span><span class="p">,</span> <span class="n">catch</span> <span class="kt">NullPointerExceptionClass</span><span class="p">],</span> <span class="nf">\</span><span class="n">t</span> <span class="o">=&gt;</span>
      <span class="kr">do</span>
        <span class="n">printLn</span> <span class="s">"property name is null or empty"</span>
        <span class="n">pure</span> <span class="kt">Nothing</span>
    <span class="p">),</span>
    <span class="p">([</span><span class="n">catchNonFatal</span><span class="p">],</span> <span class="nf">\</span><span class="n">t</span> <span class="o">=&gt;</span>
      <span class="kr">do</span>
        <span class="n">printLn</span> <span class="s">"unable to get property value"</span>
        <span class="n">pure</span> <span class="kt">Nothing</span>
    <span class="p">)</span>
  <span class="p">]</span>
  <span class="n">printLn</span> <span class="n">propValue</span>
</code></pre></div></div>
<p>This example shows how to handle exceptions with different handlers and also shows how to pass a <code class="language-plaintext highlighter-rouge">null</code> to a foreign function.
If a FFI function argument type is prefixed with <code class="language-plaintext highlighter-rouge">?</code>, then the idris type would be <code class="language-plaintext highlighter-rouge">Maybe nativeTy</code> and we can pass
<code class="language-plaintext highlighter-rouge">Nothing</code> to pass a <code class="language-plaintext highlighter-rouge">null</code> to the foreign function. We can have handlers for single exception, multiple exceptions or 
for all non fatal errors similar to Scala’s 
<a href="https://github.com/scala/scala/blob/2.12.x/src/library/scala/util/control/NonFatal.scala">NonFatal</a>.</p>

<h4 id="6-constructors">6. Constructors</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">do</span>
  <span class="n">arrayList1</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">arrayListClass</span> <span class="o">&lt;.&gt;</span> <span class="s">"&lt;init&gt;(int)"</span><span class="p">)</span> <span class="mi">10</span>
  <span class="n">putStrLn</span> <span class="o">!</span><span class="p">(</span><span class="n">either</span> <span class="n">throw</span> <span class="n">toString</span> <span class="n">arrayList1</span><span class="p">)</span>

  <span class="c1">-- Unsafe constructor</span>
  <span class="n">arrayList2</span> <span class="o">&lt;-</span> <span class="n">arrayListClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"&lt;init&gt;()"</span>
  <span class="n">putStrLn</span> <span class="o">!</span><span class="p">(</span><span class="n">toString</span> <span class="n">arrayList2</span><span class="p">)</span>
</code></pre></div></div>
<p>Similar to methods, constructors can be overloaded and we can select a particular overload variant by explicitly 
specifying the foreign type. Constructors can also be invoked in a safe or unsafe way. As constructors cannot return
null, when invoked in a safe way, the result type will only be in <code class="language-plaintext highlighter-rouge">Either</code> and not wrapped in a <code class="language-plaintext highlighter-rouge">Maybe</code>.</p>

<h4 id="7-fields">7. Fields</h4>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">do</span>
  <span class="c1">-- static field getter</span>
  <span class="n">caseInsensitiveComparator</span> <span class="o">&lt;-</span> <span class="n">stringClass</span> <span class="o">&lt;.#!&gt;</span> <span class="s">"CASE_INSENSITIVE_ORDER"</span>
  <span class="n">printLn</span> <span class="o">!</span><span class="p">((</span><span class="n">comparatorClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"compare"</span><span class="p">)</span> <span class="n">caseInsensitiveComparator</span> <span class="s">"Bar"</span> <span class="s">"august"</span><span class="p">)</span>

  <span class="n">point</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">pointClass</span> <span class="o">&lt;.!&gt;</span> <span class="s">"&lt;init&gt;(int,int)"</span><span class="p">)</span> <span class="mi">2</span> <span class="mi">3</span>

  <span class="c1">-- instance field getter</span>
  <span class="n">printLn</span> <span class="o">!</span><span class="p">((</span><span class="n">pointClass</span> <span class="o">&lt;.#&gt;</span> <span class="s">"x"</span><span class="p">)</span> <span class="n">point</span><span class="p">)</span>

  <span class="c1">-- instance field setter</span>
  <span class="p">(</span><span class="n">pointClass</span> <span class="o">&lt;.=&gt;</span> <span class="s">"x"</span><span class="p">)</span> <span class="n">point</span> <span class="mi">34</span>
  <span class="n">printLn</span> <span class="o">!</span><span class="p">((</span><span class="n">pointClass</span> <span class="o">&lt;.#&gt;</span> <span class="s">"x"</span><span class="p">)</span> <span class="n">point</span><span class="p">)</span>
</code></pre></div></div>
<p>Similar to methods and constructors, fields can also be accessed either in a safe or unsafe way using <code class="language-plaintext highlighter-rouge">&lt;.#&gt;</code> for safe
getter, <code class="language-plaintext highlighter-rouge">&lt;.=&gt;</code> for safe setter, <code class="language-plaintext highlighter-rouge">&lt;.#!&gt;</code> for unsafe getter and <code class="language-plaintext highlighter-rouge">&lt;.=!&gt;</code> for unsafe setter. Since field access
cannot throw a exception, the return type is automatically just <code class="language-plaintext highlighter-rouge">Maybe nativeTy</code>. The field types are automatically
determined without the user having to provide the foreign types of the fields.</p>

<h2 id="summary">Summary</h2>
<p>This post demonstrated how with Idris’ powerful features FFI, type provider and elaborator reflection, we can safely and
easily access JVM foreign functions. We can access fields, methods and constructors without having to explicitly provide
foreign types and we can access them in safe way without <code class="language-plaintext highlighter-rouge">null</code> getting into Idris code and handle exceptions thrown by
foreign functions. It also showed how to call overloaded methods and constructors and how <code class="language-plaintext highlighter-rouge">Maybe</code> and <code class="language-plaintext highlighter-rouge">Either</code> types are
used with foreign functions.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idris JVM: Guarding against Java null using Maybe type]]></title>
    <link href="http://localhost:4000/blog/2017/01/10/idris-jvm-guarding-against-java-null-using-maybe-type/"/>
    <updated>2017-01-10T21:08:00-05:00</updated>
    <id>http://localhost:4000/blog/2017/01/10/idris-jvm-guarding-against-java-null-using-maybe-type</id>
    <content type="html"><![CDATA[<p>Idris JVM now helps avoiding nulls getting into Idris from FFI calls using <code class="language-plaintext highlighter-rouge">Maybe</code> type.
FFI declarations can have <code class="language-plaintext highlighter-rouge">Maybe</code> type in any argument position or in the return type.</p>

<h2 id="handling-null-from-ffi-call">Handling <code class="language-plaintext highlighter-rouge">null</code> from FFI call</h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">getProperty</span> <span class="o">:</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">String</span><span class="p">)</span>
<span class="n">getProperty</span> <span class="o">=</span> <span class="n">invokeStatic</span> <span class="kt">SystemClass</span> <span class="s">"getProperty"</span> <span class="p">(</span><span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">String</span><span class="p">))</span>
</code></pre></div></div>

<p>The above function is an FFI call to Java’s method
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperty-java.lang.String-"><code class="language-plaintext highlighter-rouge">static String getProperty(String key)</code></a>.
The method returns a system property value if the property is set otherwise returns null.
With <code class="language-plaintext highlighter-rouge">Maybe</code> type in the Idris function’s return type, the Idris function returns <code class="language-plaintext highlighter-rouge">Nothing</code> if the returned value is null
otherwise the value is wrapped in <code class="language-plaintext highlighter-rouge">Just</code>.</p>

<h6 id="example">Example</h6>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">import</span> <span class="nn">IdrisJvm.IO</span>
<span class="kr">import</span> <span class="nn">Java.Lang</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">printLn</span> <span class="o">!</span><span class="p">(</span><span class="n">getProperty</span> <span class="s">"foo"</span><span class="p">)</span>  
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>idris <span class="nt">--portable-codegen</span> jvm <span class="nt">-p</span> idrisjvmffi returningnull.idr <span class="nt">-o</span> target

<span class="nv">$ </span>java <span class="nt">-cp</span> target:/path/to/idris-jvm-runtime-1.0-SNAPSHOT.jar main.Main
Nothing

<span class="nv">$ </span>java <span class="nt">-cp</span> target:/path/to/idris-jvm-runtime-1.0-SNAPSHOT.jar <span class="nt">-Dfoo</span><span class="o">=</span>hello main.Main
Just <span class="s2">"hello"</span>

</code></pre></div></div>

<h2 id="passing-maybe-values-for-nullable-values-in-ffi-calls">Passing <code class="language-plaintext highlighter-rouge">Maybe</code> values for nullable values in FFI calls</h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">import</span> <span class="nn">IdrisJvm.IO</span>
<span class="kr">import</span> <span class="nn">Java.Lang</span>

<span class="n">namespace</span> <span class="kt">Component</span>
  <span class="kt">Component</span> <span class="o">:</span> <span class="kt">Type</span>
  <span class="kt">Component</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"java/awt/Component"</span>

<span class="n">namespace</span> <span class="kt">JOptionPane</span>
  <span class="kt">JOptionPaneClass</span> <span class="o">:</span> <span class="kt">JVM_NativeTy</span>
  <span class="kt">JOptionPaneClass</span> <span class="o">=</span> <span class="kt">Class</span> <span class="s">"javax/swing/JOptionPane"</span>

  <span class="n">showMessageDialog</span> <span class="o">:</span> <span class="kt">Inherits</span> <span class="kt">Object</span> <span class="n">messageTy</span> <span class="o">=&gt;</span> <span class="kt">Maybe</span> <span class="kt">Component</span> <span class="o">-&gt;</span> <span class="n">messageTy</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
  <span class="n">showMessageDialog</span> <span class="n">parent</span> <span class="n">message</span> <span class="o">=</span>
    <span class="n">invokeStatic</span> <span class="kt">JOptionPaneClass</span> <span class="s">"showMessageDialog"</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Component</span> <span class="o">-&gt;</span> <span class="kt">Object</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span><span class="p">)</span> <span class="n">parent</span> <span class="p">(</span><span class="n">believe_me</span> <span class="n">message</span><span class="p">)</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">showMessageDialog</span> <span class="kt">Nothing</span> <span class="s">"Hello Idris!"</span>

</code></pre></div></div>

<p>In the above code, the Java method
<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-"><code class="language-plaintext highlighter-rouge">JOptionPane.showMessageDialog(parentComponent, message)</code></a>
takes a nullable parent component and a message. If the parent component is <code class="language-plaintext highlighter-rouge">null</code> then the message is displayed in a default frame.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ idris --portable-codegen jvm -p idrisjvmffi passingnull.idr -o target

$ java -cp target:/path/to/idris-jvm-runtime-1.0-SNAPSHOT.jar main.Main
</code></pre></div></div>
<p>Idris code passes <code class="language-plaintext highlighter-rouge">Nothing</code> in the above code so <code class="language-plaintext highlighter-rouge">null</code> is passed for the Java method that displays the message in a default frame as shown below.
<img src="/images/idris-passing-null.png" alt="Idris Passing Null" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Idris on the JVM and an Idris Android example]]></title>
    <link href="http://localhost:4000/blog/2017/01/06/introducing-idris-on-the-jvm-and-an-idris-android-example/"/>
    <updated>2017-01-06T22:51:00-05:00</updated>
    <id>http://localhost:4000/blog/2017/01/06/introducing-idris-on-the-jvm-and-an-idris-android-example</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mmhelloworld/idris-jvm">Idris on the JVM!</a> Yes, a dependently typed language on the JVM!
I have been working on a <a href="https://github.com/mmhelloworld/idris-jvm">JVM bytecode backend for Idris</a> for the past few months and
it is now at a point that we can even write Android programs with Idris without having to write a single line of Java.
In this post, we will see how Idris works on the JVM and an example Android program written in Idris.</p>

<h2 id="hello-world">Hello World</h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">printLn</span> <span class="s">"Hello World"</span>
</code></pre></div></div>

<h6 id="compile">Compile:</h6>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>idris <span class="nt">--portable-codegen</span> jvm <span class="nt">-p</span> idrisjvmffi helloworld.idr <span class="nt">-o</span> target
</code></pre></div></div>

<p>Dependencies are provided as Idris packages, not as Java dependencies like jar or class files.
The overall process is that the compiler reads Idris files and converts them into an intermediate JSON representation and
the JVM bytecode generator takes the JSON files and converts them into JVM bytecode class files directly.
It is only when we run a Java class, we have to provide Java dependency jars. The output option <code class="language-plaintext highlighter-rouge">-o</code> represents a directory
where the Java class files will be created.</p>

<h6 id="run">Run:</h6>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>java <span class="nt">-cp</span> target:/path/to/idris-jvm-runtime-1.0-SNAPSHOT.jar main.Main
<span class="s2">"Hello World"</span>

</code></pre></div></div>

<p>And the output folder contains,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree target
target
├── Decidable
│   └── Equality.class
├── main
│   └── Main.class
└── Prelude
    ├── Basics.class
    ├── Bool.class
    ├── Chars.class
    ├── Interfaces.class
    ├── Show.class
    └── Strings.class

</code></pre></div></div>

<p>Why do we have all these classes? We only compiled <code class="language-plaintext highlighter-rouge">Main</code> module! This is because Idris performs whole program analysis/compilation
and code generator generates bytecode for all the modules that are relevant for the result produced by the main program.</p>

<h2 id="how-does-idris-jvm-handle-tail-calls">How does Idris JVM handle tail calls?</h2>

<p>Idris JVM eliminates self-recursion with JVM <code class="language-plaintext highlighter-rouge">GOTO</code> and uses trampolines for other tail calls.
Let’s look at the following examples.</p>

<h5 id="self-recursion-example">self-recursion example</h5>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">import</span> <span class="nn">IdrisJvm.IO</span>

<span class="n">sum</span> <span class="o">:</span> <span class="kt">Nat</span> <span class="o">-&gt;</span> <span class="kt">Nat</span>
<span class="n">sum</span> <span class="n">n</span> <span class="o">=</span> <span class="n">go</span> <span class="mi">0</span> <span class="n">n</span> <span class="kr">where</span>
  <span class="n">go</span> <span class="o">:</span> <span class="kt">Nat</span> <span class="o">-&gt;</span> <span class="kt">Nat</span> <span class="o">-&gt;</span> <span class="kt">Nat</span>
  <span class="n">go</span> <span class="n">acc</span> <span class="kt">Z</span> <span class="o">=</span> <span class="n">acc</span>
  <span class="n">go</span> <span class="n">acc</span> <span class="n">n</span><span class="o">@</span><span class="p">(</span><span class="kt">S</span> <span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">go</span> <span class="p">(</span><span class="n">acc</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="n">k</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">printLn</span> <span class="p">(</span><span class="n">sum</span> <span class="mi">50000</span><span class="p">)</span>

</code></pre></div></div>

<p>This program would work just fine without blowing up the stack as it will be compiled down to a loop that uses JVM’s <code class="language-plaintext highlighter-rouge">GOTO</code> instruction.
Here is the relevant section from bytecode:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>javap <span class="nt">-c</span> <span class="nt">-cp</span> target:/path/to/idris-jvm-runtime-1.0-SNAPSHOT.jar main.Main

  public static java.lang.Object <span class="nb">sum</span><span class="nv">$whr$go$colon$0</span><span class="o">(</span>java.lang.Object, java.lang.Object, java.lang.Object<span class="o">)</span><span class="p">;</span>
    Code:
       0: aconst_null
       1: astore        7
       3: aconst_null
       4: astore_3
       5: aconst_null
       6: astore        4
       8: aconst_null
       9: astore        5
      11: aconst_null
      12: astore        6
      14: iconst_1
      15: istore        8
      17: iload         8
      19: ifeq          130
      22: aload_2
      23: new           <span class="c">#80                 // class java/math/BigInteger</span>
      26: dup
      27: ldc           <span class="c">#82                 // String 0</span>
      29: invokespecial <span class="c">#85                 // Method java/math/BigInteger."&lt;init&gt;":(Ljava/lang/String;)V</span>
      32: invokestatic  <span class="c">#333                // Method mmhelloworld/idrisjvmruntime/Util.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z</span>
      35: ifeq          47
      38: aload_1
      39: astore        7
      41: iconst_0
      42: istore        8
      44: goto          127
      47: new           <span class="c">#80                 // class java/math/BigInteger</span>
      50: dup
      51: ldc_w         <span class="c">#335                // String 1</span>
      54: invokespecial <span class="c">#85                 // Method java/math/BigInteger."&lt;init&gt;":(Ljava/lang/String;)V</span>
      57: astore_3
      58: aload_2
      59: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
      62: aload_3
      63: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
      66: invokevirtual <span class="c">#338                // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;</span>
      69: astore_3
      70: new           <span class="c">#80                 // class java/math/BigInteger</span>
      73: dup
      74: ldc_w         <span class="c">#335                // String 1</span>
      77: invokespecial <span class="c">#85                 // Method java/math/BigInteger."&lt;init&gt;":(Ljava/lang/String;)V</span>
      80: astore        4
      82: aload_3
      83: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
      86: aload         4
      88: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
      91: invokevirtual <span class="c">#107                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;</span>
      94: astore        4
      96: iconst_0
      97: invokestatic  <span class="c">#41                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>
     100: astore        5
     102: aload_1
     103: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
     106: aload         4
     108: invokestatic  <span class="c">#103                // Method mmhelloworld/idrisjvmruntime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;</span>
     111: invokevirtual <span class="c">#107                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;</span>
     114: astore        6
     116: aload         5
     118: astore_0
     119: aload         6
     121: astore_1
     122: aload_3
     123: astore_2
     124: goto          127
     127: goto          17
     130: aload         7
     132: areturn

</code></pre></div></div>
<p>The third line from the last is the <code class="language-plaintext highlighter-rouge">GOTO</code> instruction that transfers the control back to the top of function instead of
actually calling the function.</p>

<h5 id="mutual-recursion-example">Mutual recursion example:</h5>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="n">mutual</span>
  <span class="n">evenT</span> <span class="o">:</span> <span class="kt">Nat</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Bool</span>
  <span class="n">evenT</span> <span class="kt">Z</span> <span class="o">=</span> <span class="n">pure</span> <span class="kt">True</span>
  <span class="n">evenT</span> <span class="p">(</span><span class="kt">S</span> <span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">oddT</span> <span class="n">k</span>

  <span class="n">oddT</span> <span class="o">:</span> <span class="kt">Nat</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Bool</span>
  <span class="n">oddT</span> <span class="kt">Z</span> <span class="o">=</span> <span class="n">pure</span> <span class="kt">False</span>
  <span class="n">oddT</span> <span class="p">(</span><span class="kt">S</span> <span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">evenT</span> <span class="n">k</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">printLn</span> <span class="o">!</span><span class="p">(</span><span class="n">evenT</span> <span class="mi">9999</span><span class="p">)</span>

</code></pre></div></div>

<p>The above code also would work fine without killing the stack. Mutual recursion is handled using trampolines and
the tail calls are delayed and compiled down to Java 8 lambdas. As the bytecode for this is bit long, here is the
decompiled bytecode for the <code class="language-plaintext highlighter-rouge">evenT</code> function:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">evenT</span><span class="o">(</span><span class="nc">Object</span> <span class="n">var0</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Object</span> <span class="n">var4</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Integer</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Integer</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">IdrisObject</span> <span class="n">var3</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Util</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">var0</span><span class="o">,</span> <span class="nc">BigInteger</span><span class="o">.</span><span class="na">ZERO</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">var1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="n">var2</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="n">var3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IdrisObject</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
            <span class="n">var4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IdrisObject</span><span class="o">(</span><span class="mi">65653</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">});</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">BigInteger</span> <span class="n">var5</span> <span class="o">=</span> <span class="nc">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
            <span class="n">var5</span> <span class="o">=</span> <span class="nc">Util</span><span class="o">.</span><span class="na">asBigInt</span><span class="o">(</span><span class="n">var0</span><span class="o">).</span><span class="na">subtract</span><span class="o">(</span><span class="nc">Util</span><span class="o">.</span><span class="na">asBigInt</span><span class="o">(</span><span class="n">var5</span><span class="o">));</span>
            <span class="n">var4</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nf">oddT</span><span class="o">(</span><span class="n">var5</span><span class="o">);</span>
            <span class="o">};</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">var4</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>As we can see from the decompiled output above, the <code class="language-plaintext highlighter-rouge">oddT</code> call is not performed on the same call stack but a thunk
wrapping the function call is returned using lambda (which is compiled down to JVM’s <code class="language-plaintext highlighter-rouge">invokedynamic</code> instruction).</p>

<p>Here is the relevant bit from bytecode for those who are interested:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        68: getstatic     #64                 // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
        71: astore_1
        72: aload_0
        73: invokestatic  #68                 // Method io/github/mmhelloworld/idrisjvm/runtime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;
        76: aload_1
        77: invokestatic  #68                 // Method io/github/mmhelloworld/idrisjvm/runtime/Util.asBigInt:(Ljava/lang/Object;)Ljava/math/BigInteger;
        80: invokevirtual #72                 // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        83: astore_1
        84: aload_1
        85: invokedynamic #79,  0             // InvokeDynamic #1:call:(Ljava/lang/Object;)Lio/github/mmhelloworld/idrisjvm/runtime/Thunk;
        90: astore        4
        92: goto          95
        95: aload         4
        97: areturn
</code></pre></div></div>

<h2 id="java-interoperability-calling-java-from-idris-and-calling-idris-from-java">Java interoperability: Calling Java from Idris and calling Idris from Java</h2>

<p>Idris JVM supports calling Java static methods, instance methods, constructors and also accessing static and instance fields from Idris.
At the moment, except for Java arrays, all the Java types can be constructed from Idris and passed to Java methods.
Support for handling nulls and exceptions is currently in progress and will soon be available.
(Update 01/10/2017: We can now
<a href="http://mmhelloworld.github.io/blog/2017/01/10/idris-jvm-guarding-against-java-null-using-maybe-type/">use <code class="language-plaintext highlighter-rouge">Maybe</code> type to avoid Java nulls</a>
in Idris code)</p>

<p>To use Idris functions from Java, Idris JVM supports exporting Idris functions as static methods, instance methods,
constructors of an exported Java class. The exported class can also extend a Java class or implement interfaces with Idris functions.</p>

<p>To demonstrate these features, let’s create an Android application In Idris.</p>

<h3 id="an-android-application-in-idris">An Android application in Idris</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span>

<span class="kr">import</span> <span class="nn">IdrisJvm.IO</span>
<span class="kr">import</span> <span class="nn">Java.Lang</span>

<span class="n">pythag</span> <span class="o">:</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>
<span class="n">pythag</span> <span class="n">max</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">|</span> <span class="n">z</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">max</span><span class="p">],</span> <span class="n">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">z</span><span class="p">],</span> <span class="n">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">y</span><span class="p">],</span>
                          <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">==</span> <span class="n">z</span> <span class="o">*</span> <span class="n">z</span><span class="p">]</span>

<span class="kt">IdrisAndroidActivity</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">IdrisAndroidActivity</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"hello/IdrisAndroidActivity"</span>

<span class="kt">Bundle</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">Bundle</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"android/os/Bundle"</span>

<span class="kt">Context</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">Context</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"android/content/Context"</span>

<span class="kt">View</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">View</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"android/view/View"</span>

<span class="kt">TextView</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">TextView</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"android/widget/TextView"</span>

<span class="kt">Inherits</span> <span class="kt">View</span> <span class="kt">TextView</span> <span class="kr">where</span> <span class="p">{}</span>

<span class="kt">CharSequence</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kt">CharSequence</span> <span class="o">=</span> <span class="kt">JVM_Native</span> <span class="o">$</span> <span class="kt">Class</span> <span class="s">"java/lang/CharSequence"</span>

<span class="kt">Inherits</span> <span class="kt">CharSequence</span> <span class="kt">String</span> <span class="kr">where</span> <span class="p">{}</span>

<span class="n">superOnCreate</span> <span class="o">:</span> <span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">Bundle</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">superOnCreate</span> <span class="o">=</span> <span class="n">invokeInstance</span> <span class="s">"superOnCreate"</span> <span class="p">(</span><span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">Bundle</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span><span class="p">)</span>

<span class="n">getApplicationContext</span> <span class="o">:</span> <span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="kt">Context</span>
<span class="n">getApplicationContext</span> <span class="o">=</span> <span class="n">invokeInstance</span> <span class="s">"getApplicationContext"</span> <span class="p">(</span><span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="kt">Context</span><span class="p">)</span>

<span class="n">newTextView</span> <span class="o">:</span> <span class="kt">Context</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="kt">TextView</span>
<span class="n">newTextView</span> <span class="o">=</span> <span class="kt">FFI</span><span class="o">.</span><span class="n">new</span> <span class="p">(</span><span class="kt">Context</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="kt">TextView</span><span class="p">)</span>

<span class="n">setText</span> <span class="o">:</span> <span class="kt">Inherits</span> <span class="kt">CharSequence</span> <span class="n">charSequence</span> <span class="o">=&gt;</span> <span class="kt">TextView</span> <span class="o">-&gt;</span> <span class="n">charSequence</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">setText</span> <span class="n">this</span> <span class="n">text</span> <span class="o">=</span> <span class="n">invokeInstance</span> <span class="s">"setText"</span> <span class="p">(</span><span class="kt">TextView</span> <span class="o">-&gt;</span> <span class="kt">CharSequence</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span><span class="p">)</span> <span class="n">this</span> <span class="p">(</span><span class="n">believe_me</span> <span class="n">text</span><span class="p">)</span>

<span class="n">setContentView</span> <span class="o">:</span> <span class="kt">Inherits</span> <span class="kt">View</span> <span class="n">view</span> <span class="o">=&gt;</span> <span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="n">view</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">setContentView</span> <span class="n">this</span> <span class="n">view</span> <span class="o">=</span> <span class="n">invokeInstance</span> <span class="s">"setContentView"</span> <span class="p">(</span><span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">View</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span><span class="p">)</span> <span class="n">this</span> <span class="p">(</span><span class="n">believe_me</span> <span class="n">view</span><span class="p">)</span>

<span class="n">onCreate</span> <span class="o">:</span> <span class="kt">IdrisAndroidActivity</span> <span class="o">-&gt;</span> <span class="kt">Bundle</span> <span class="o">-&gt;</span> <span class="kt">JVM_IO</span> <span class="nb">()</span>
<span class="n">onCreate</span> <span class="n">this</span> <span class="n">bundle</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">superOnCreate</span> <span class="n">this</span> <span class="n">bundle</span>
  <span class="n">context</span> <span class="o">&lt;-</span> <span class="n">getApplicationContext</span> <span class="n">this</span>
  <span class="n">textView</span> <span class="o">&lt;-</span> <span class="n">newTextView</span> <span class="n">context</span>
  <span class="n">setText</span> <span class="n">textView</span> <span class="o">$</span> <span class="s">"Hello Android from Idris! pythag 50 is "</span> <span class="o">++</span> <span class="n">show</span> <span class="p">(</span><span class="n">pythag</span> <span class="mi">50</span><span class="p">)</span>
  <span class="n">setContentView</span> <span class="n">this</span> <span class="n">textView</span>

<span class="n">main</span> <span class="o">:</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">pure</span> <span class="nb">()</span>

<span class="n">androidExport</span><span class="o">:</span> <span class="kt">FFI_Export</span> <span class="kt">FFI_JVM</span> <span class="s">"hello/IdrisAndroidActivity extends android/support/v7/app/AppCompatActivity"</span> <span class="kt">[]</span>
<span class="n">androidExport</span> <span class="o">=</span>
  <span class="kt">Fun</span> <span class="n">superOnCreate</span> <span class="p">(</span><span class="kt">Super</span> <span class="s">"onCreate"</span><span class="p">)</span> <span class="o">$</span>
  <span class="kt">Fun</span> <span class="n">onCreate</span> <span class="p">(</span><span class="kt">ExportInstance</span> <span class="s">"onCreate"</span><span class="p">)</span> <span class="o">$</span>
  <span class="kt">End</span>

</code></pre></div></div>

<p>The above program demonstrates calling Java instance methods (<code class="language-plaintext highlighter-rouge">setText</code> for example) and constructors (<code class="language-plaintext highlighter-rouge">newTextView</code>).</p>

<p>It further demonstrates how to handle inheritance relationship when passing subclass instances to a parent class type.
For example, function <code class="language-plaintext highlighter-rouge">setContentView</code> takes a <code class="language-plaintext highlighter-rouge">View</code> but we can pass a <code class="language-plaintext highlighter-rouge">TextView</code> as it is a subclass of <code class="language-plaintext highlighter-rouge">View</code> and we
mention that to Idris via <code class="language-plaintext highlighter-rouge">Inherits View TextView where {}</code>.</p>

<p>It also demonstrates how we can create a Java class that extends another class and override methods with Idris functions.
The last section <code class="language-plaintext highlighter-rouge">androidExport</code> creates a Java class named <code class="language-plaintext highlighter-rouge">hello/IdrisAndroidActivity</code> that extends <code class="language-plaintext highlighter-rouge">android/support/v7/app/AppCompatActivity</code>.
The Java class also creates a wrapper method <code class="language-plaintext highlighter-rouge">superOnCreate</code> that just delegates to <code class="language-plaintext highlighter-rouge">super.OnCreate</code> and the class also overrides <code class="language-plaintext highlighter-rouge">onCreate</code> method
with Idris’ <code class="language-plaintext highlighter-rouge">onCreate</code> function. The Java class can also implement one or more Java interfaces with something like,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello/IdrisAndroidActivity extends android/support/v7/app/AppCompatActivity implements java/lang/Runnable, java/lang/Comparable
</code></pre></div></div>

<p>A module can have multiple exports so we can actually create multiple Java classes with Idris implementation functions from an Idris module.</p>

<p>We can compile this as usual,</p>

<p><code class="language-plaintext highlighter-rouge">idris --portable-codegen jvm -p idrisjvmffi idrisandroid.idr -o target</code></p>

<p>It would produce the following class files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tree target/
target/
├── Decidable
│   └── Equality.class
├── hello
│   └── IdrisAndroidActivity.class
├── main
│   ├── Main.class
│   └── Prelude.class
└── Prelude
    ├── Algebra.class
    ├── Applicative.class
    ├── Bool.class
    ├── Foldable.class
    ├── Interfaces.class
    ├── List.class
    ├── Monad.class
    ├── Show.class
    └── Strings.class

</code></pre></div></div>

<h5 id="deploying-to-android">Deploying to Android:</h5>
<ol>
  <li>Create an android project using Android studio with <a href="https://developer.android.com/guide/platform/j8-jack.html#configuration">Jack support for Java 8</a>.</li>
  <li>Then package the classes compiled above along with idris-jvm-runtime-1.0-SNAPSHOT.jar classes in a single jar and copy into an
android project’s <code class="language-plaintext highlighter-rouge">app/libs</code> directory.</li>
  <li>Change the activity class name in android manifest file to the Idris exported class name <code class="language-plaintext highlighter-rouge">hello.IdrisAndroidActivity</code>.</li>
  <li>Then run <code class="language-plaintext highlighter-rouge">./gradlew installDebug</code> from android project after starting an emulator or connected to an android device.</li>
  <li>Finally we should see our Idris code running on Android! It should look something like this:
<img src="/images/idris-android.png" alt="Idris Android" /></li>
</ol>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell on the JVM via GHCJS and Nashorn]]></title>
    <link href="http://localhost:4000/blog/2016/02/27/haskell-on-the-jvm-via-ghcjs-and-nashorn/"/>
    <updated>2016-02-27T19:56:00-05:00</updated>
    <id>http://localhost:4000/blog/2016/02/27/haskell-on-the-jvm-via-ghcjs-and-nashorn</id>
    <content type="html"><![CDATA[<p>Currently there are 2 ways we can write Haskell on the JVM:</p>

<ol>
  <li><a href="https://github.com/Frege/frege">Frege</a>, a language that follows Haskell 2010 standard and compiles to Java.</li>
  <li>Haskell itself by compiling it to JavaScript via GHCJS.</li>
</ol>

<p>Frege is basically a Haskell for the JVM and infact conforms to Haskell 2010 with few inbuilt GHC extensions. Even with good Java interop, it doesn’t sacrifice its type guarantees and currently is the only pure language on the JVM.</p>

<p>In this post, I am going to explore another interesting option: Haskell itself on the JVM. Haskell can be compiled to JavaScript using GHCJS and Java has an inbuilt JavaScript engine, called Nashorn so it is actually possible to compile Haskell to JavaScript and run the resulting JavaScript on the JVM.</p>

<p>Here is a simple Haskell code that can be run on the JVM:</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="c1">-- Nashorn doesn't provide default console object. Haskell's putStrLn logs to the console.</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"console={ </span><span class="se">\
    \</span><span class="s"> log: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> info: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> warn: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> debug: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> error: function(s) { java.lang.System.err.print(s); }</span><span class="se">\
    \</span><span class="s"> }"</span>
  <span class="n">setupConsole</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"java.lang.System.exit($1)"</span>
  <span class="n">sysexit</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">setupConsole</span>
  <span class="n">putStrLn</span> <span class="s">"Hello from Haskell!"</span>
  <span class="n">sysexit</span> <span class="mi">0</span>

</code></pre></div></div>

<p>Nashorn doesn’t have an inbuilt <code class="language-plaintext highlighter-rouge">console</code> object and Haskell’s <code class="language-plaintext highlighter-rouge">putStrLn</code> prints to the console so we have to provide an implementation of console. The implementation, as can be seen from the code above, is actually backed by Java’s <code class="language-plaintext highlighter-rouge">System.out.print</code>. That is our first example of calling Java from Haskell. <code class="language-plaintext highlighter-rouge">sysexit</code> is another function calling Java. <code class="language-plaintext highlighter-rouge">sysexit</code> is needed here as otherwise the program just keeps on running which I think is because of JavaScript event loop or something similar that prevents the JVM from shutting down.</p>

<h3 id="compiling-haskell-with-ghcjs-and-running-on-jvm">Compiling Haskell with GHCJS and running on JVM</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ghcjs -o HelloJava HelloJava.hs
[1 of 1] Compiling Main             ( HelloJava.hs, HelloJava.js_o )
Linking HelloJava.jsexe (Main)

$ jjs HelloJava.jsexe/all.js 
Hello from Haskell!
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">jjs</code> is a JVM laucher for JavaScript code similar to Node. It is also possible to run this as a regular Java program along with other Java classes without <code class="language-plaintext highlighter-rouge">jjs</code>. <code class="language-plaintext highlighter-rouge">jjs</code> is just a convenient way  to run just JavaScript code on the JVM. Above GHCJS compiles the Haskell code to JavaScript in one file <code class="language-plaintext highlighter-rouge">all.js</code> and the JVM runs the JavaScript code from <code class="language-plaintext highlighter-rouge">all.js</code>.</p>

<h3 id="example-2">Example 2</h3>

<p>Now let’s look at another example that shows how to convert between Haskell and Java lists:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# LANGUAGE ForeignFunctionInterface #-}</span>
<span class="cp">{-# LANGUAGE JavaScriptFFI #-}</span>
<span class="cp">{-# LANGUAGE UnliftedFFITypes #-}</span>
<span class="cp">{-# LANGUAGE GHCForeignImportPrim #-}</span>
<span class="cp">{-# LANGUAGE TypeSynonymInstances #-}</span>
<span class="cp">{-# LANGUAGE FlexibleInstances #-}</span>
<span class="cp">{-# LANGUAGE DataKinds #-}</span>
<span class="cp">{-# LANGUAGE PolyKinds #-}</span>
<span class="cp">{-# LANGUAGE DeriveDataTypeable #-}</span>
<span class="cp">{-# LANGUAGE TypeFamilies #-}</span>

<span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Control.Monad.ST</span>
<span class="kr">import</span> <span class="nn">GHCJS.Types</span>
<span class="kr">import</span> <span class="nn">GHCJS.Foreign</span>
<span class="kr">import</span> <span class="nn">GHCJS.Prim</span>
<span class="kr">import</span> <span class="nn">Data.Typeable</span>
<span class="kr">import</span> <span class="nn">GHC.ST</span> 

<span class="kr">data</span> <span class="kt">MutabilityType</span> <span class="n">s</span> <span class="o">=</span> <span class="kt">Mutable</span>
                      <span class="o">|</span> <span class="kt">Immutable</span>
                      <span class="o">|</span> <span class="kt">STMutable</span> <span class="n">s</span>

<span class="kr">data</span> <span class="kt">IsItMutable</span> <span class="o">=</span> <span class="kt">IsImmutable</span>
                 <span class="o">|</span> <span class="kt">IsMutable</span>

<span class="c1">-- Copied from GHCJS.Internal.Types. Not sure why this is not exposed.</span>
<span class="kr">type</span> <span class="n">family</span> <span class="kt">Mutability</span> <span class="p">(</span><span class="n">a</span> <span class="o">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="o">::</span> <span class="kt">IsItMutable</span> <span class="kr">where</span>
  <span class="kt">Mutability</span> <span class="kt">Immutable</span>     <span class="o">=</span> <span class="kt">IsImmutable</span>
  <span class="kt">Mutability</span> <span class="kt">Mutable</span>       <span class="o">=</span> <span class="kt">IsMutable</span>
  <span class="kt">Mutability</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="kt">IsMutable</span>

<span class="cm">{- java.util.ArrayList class and its methods -}</span>
<span class="kr">newtype</span> <span class="kt">SomeArrayList</span> <span class="p">(</span><span class="n">a</span> <span class="o">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="kt">SomeArrayList</span> <span class="kt">JSVal</span> <span class="kr">deriving</span> <span class="kt">Typeable</span>
<span class="kr">type</span> <span class="kt">ArrayList</span>           <span class="o">=</span> <span class="kt">SomeArrayList</span> <span class="kt">Immutable</span>
<span class="kr">type</span> <span class="kt">MutableArrayList</span>    <span class="o">=</span> <span class="kt">SomeArrayList</span> <span class="kt">Mutable</span>
<span class="kr">type</span> <span class="kt">STArrayList</span> <span class="n">s</span>      <span class="o">=</span> <span class="kt">SomeArrayList</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span>

<span class="kr">instance</span> <span class="kt">IsJSVal</span> <span class="p">(</span><span class="kt">SomeArrayList</span> <span class="n">m</span><span class="p">)</span>

<span class="c1">-- ArrayList Constructor</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"new $1()"</span>
  <span class="n">arrayList_new</span> <span class="o">::</span> <span class="kt">JType</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span> 

<span class="c1">-- Adds an element to ArrayList</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"$2.add($1)"</span>
  <span class="n">arrayList_add</span> <span class="o">::</span> <span class="kt">JSVal</span> <span class="o">-&gt;</span>  <span class="kt">STArrayList</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="nb">()</span>

<span class="cm">{- java.util.Iterator class and its methods -}</span>
<span class="kr">newtype</span> <span class="kt">SomeIterator</span> <span class="p">(</span><span class="n">a</span> <span class="o">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="kt">SomeIterator</span> <span class="kt">JSVal</span> <span class="kr">deriving</span> <span class="kt">Typeable</span>
<span class="kr">type</span> <span class="kt">Iterator</span>            <span class="o">=</span> <span class="kt">SomeIterator</span> <span class="kt">Immutable</span>
<span class="kr">type</span> <span class="kt">MutableIterator</span>     <span class="o">=</span> <span class="kt">SomeIterator</span> <span class="kt">Mutable</span>
<span class="kr">type</span> <span class="kt">STIterator</span> <span class="n">s</span>        <span class="o">=</span> <span class="kt">SomeIterator</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span>

<span class="kr">instance</span> <span class="kt">IsJSVal</span> <span class="p">(</span><span class="kt">SomeIterator</span> <span class="n">m</span><span class="p">)</span>

<span class="c1">-- Create an Iterator from an ArrayList</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"$1.iterator()"</span>
  <span class="n">iterator</span> <span class="o">::</span> <span class="kt">STArrayList</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STIterator</span> <span class="n">s</span><span class="p">)</span>

<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"$1.hasNext()"</span>
  <span class="n">iterator_hasNext</span> <span class="o">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">Bool</span>

<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"$1.next()"</span>
  <span class="n">iterator_next</span> <span class="o">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">JSVal</span>

<span class="cm">{- Other Nashorn imports -}</span>

<span class="c1">-- Represents a Java type</span>
<span class="kr">newtype</span> <span class="kt">JType</span> <span class="o">=</span> <span class="kt">JType</span> <span class="kt">JSVal</span>

<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"java.lang.System.out.println($1)"</span>
  <span class="n">jprintln</span> <span class="o">::</span> <span class="kt">JSVal</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"java.lang.System.exit($1)"</span>
  <span class="n">sysexit</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="c1">-- Imports a Java class</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"Java.type($1)"</span>
  <span class="n">jimport</span> <span class="o">::</span> <span class="kt">JSVal</span> <span class="o">-&gt;</span> <span class="kt">JType</span> 

<span class="cm">{- Create an instance of Java's ArrayList from Haskell's list -}</span>
<span class="n">listToArrayList</span> <span class="o">::</span> <span class="p">[</span><span class="kt">JSVal</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span>
<span class="n">listToArrayList</span> <span class="n">xs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">arrayListClass</span> <span class="o">=</span> <span class="n">jimport</span> <span class="o">$</span> <span class="n">toJSString</span> <span class="s">"java.util.ArrayList"</span>
    <span class="n">arrList</span> <span class="o">&lt;-</span> <span class="n">arrayList_new</span> <span class="n">arrayListClass</span>
    <span class="n">go</span> <span class="n">xs</span> <span class="n">arrList</span>
  <span class="kr">where</span>
    <span class="n">go</span> <span class="kt">[]</span> <span class="n">arrList</span> <span class="o">=</span> <span class="n">return</span> <span class="n">arrList</span>
    <span class="n">go</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">arrList</span> <span class="o">=</span> <span class="kr">do</span>
      <span class="n">arrayList_add</span> <span class="n">x</span> <span class="n">arrList</span>
      <span class="n">go</span> <span class="n">xs</span> <span class="n">arrList</span>

<span class="cm">{- Create Haskell's list from Java's Iterator -}</span>
<span class="n">iteratorToList</span> <span class="o">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">[</span><span class="kt">JSVal</span><span class="p">]</span>
<span class="n">iteratorToList</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">reverse</span> <span class="o">&lt;$&gt;</span> <span class="n">go</span> <span class="kt">[]</span> <span class="kr">where</span>
  <span class="n">go</span> <span class="n">acc</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">hasNext</span> <span class="o">&lt;-</span> <span class="n">iterator_hasNext</span> <span class="n">itr</span>
    <span class="kr">if</span> <span class="n">hasNext</span>
      <span class="kr">then</span> <span class="kr">do</span>
        <span class="n">next</span> <span class="o">&lt;-</span> <span class="n">iterator_next</span> <span class="n">itr</span>
        <span class="n">go</span> <span class="p">(</span><span class="n">next</span><span class="o">:</span> <span class="n">acc</span><span class="p">)</span>
      <span class="kr">else</span>
        <span class="n">return</span> <span class="n">acc</span>

<span class="c1">-- Nashorn doesn't provide default console object. Haskell's putStrLn logs to the console.</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"console={ </span><span class="se">\
    \</span><span class="s"> log: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> info: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> warn: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> debug: function(s) { java.lang.System.out.print(s); },</span><span class="se">\
    \</span><span class="s"> error: function(s) { java.lang.System.err.print(s); }</span><span class="se">\
    \</span><span class="s"> }"</span>
  <span class="n">setupConsole</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="n">demo</span> <span class="o">=</span> <span class="n">runST</span> <span class="o">$</span> <span class="kr">do</span>
  <span class="n">jlist</span> <span class="o">&lt;-</span> <span class="n">listToArrayList</span> <span class="o">.</span> <span class="n">map</span> <span class="n">toJSInt</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
  <span class="n">iterator</span> <span class="n">jlist</span> <span class="o">&gt;&gt;=</span> <span class="n">iteratorToList</span>
 
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">setupConsole</span>
  <span class="n">mapM_</span> <span class="p">(</span><span class="n">putStrLn</span> <span class="o">.</span> <span class="n">show</span> <span class="o">.</span> <span class="n">fromJSInt</span><span class="p">)</span> <span class="n">demo</span>
  <span class="n">sysexit</span> <span class="mi">0</span>
 
</code></pre></div></div>

<p>In the code above, two Java types are used: <code class="language-plaintext highlighter-rouge">java.util.ArrayList</code> and <code class="language-plaintext highlighter-rouge">java.util.Iterator</code>.</p>

<h4 id="importing-a-java-class">Importing a Java class</h4>
<p>A Java class can be imported with <code class="language-plaintext highlighter-rouge">Java.type(className)</code> Nashorn JavaScript code. Line 80 defines the corresponding Haskell FFI function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Imports a Java class</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"Java.type($1)"</span>
  <span class="n">jimport</span> <span class="o">::</span> <span class="kt">JSVal</span> <span class="o">-&gt;</span> <span class="kt">JType</span>
</code></pre></div></div>
<h4 id="creating-an-instance-of-a-java-class">Creating an instance of a Java class</h4>
<p>An instance can be created by invoking the constructor on the Java class with <code class="language-plaintext highlighter-rouge">new</code>. Here is the corresponding FFI:</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- ArrayList Constructor</span>
<span class="n">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">"new $1()"</span>
  <span class="n">arrayList_new</span> <span class="o">::</span> <span class="kt">JType</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>It takes the <code class="language-plaintext highlighter-rouge">ArrayList</code> class and invokes the dafault <code class="language-plaintext highlighter-rouge">ArrayList</code> constructor to return an instance of it. In the same way, we can create FFI functions for <code class="language-plaintext highlighter-rouge">ArrayList.add</code> and <code class="language-plaintext highlighter-rouge">ArrayList.iterator</code> to return an Java <code class="language-plaintext highlighter-rouge">Iterator</code> instance.</p>

<p>The function <code class="language-plaintext highlighter-rouge">listToArrayList</code> takes a Haskell list and return an instance of Java <code class="language-plaintext highlighter-rouge">ArrayList</code>. As the java list is mutable, it is returned as <code class="language-plaintext highlighter-rouge">STArrayList s</code> inside <code class="language-plaintext highlighter-rouge">ST</code>. This function first creates an instance of <code class="language-plaintext highlighter-rouge">ArrayList</code> by invoking the Java constructor and then calls <code class="language-plaintext highlighter-rouge">ArrayList.add</code> to add items from Haskell list to the <code class="language-plaintext highlighter-rouge">ArrayList</code>.</p>

<p>In the similar way, the function <code class="language-plaintext highlighter-rouge">iteratorToList</code> takes a Java <code class="language-plaintext highlighter-rouge">iterator</code> and returns Haskell list by extracting items from the iterator by invoking corresponding FFI functions for <code class="language-plaintext highlighter-rouge">Iterator.hasNext</code> and <code class="language-plaintext highlighter-rouge">Iterator.next</code>.</p>

<h3 id="building-with-stack">Building with <code class="language-plaintext highlighter-rouge">Stack</code></h3>
<p>It is easy to <a href="http://docs.haskellstack.org/en/stable/ghcjs/">setup a GHCJS project with <code class="language-plaintext highlighter-rouge">Stack</code></a> so that we can add other dependencies easily and build it for GHCJS. With the above code in a stack project “haskell-jvm-hello”, we can build it with <code class="language-plaintext highlighter-rouge">stack build</code> and run it with <code class="language-plaintext highlighter-rouge">jjs</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ stack build
haskell-jvm-hello-0.1.0.0: unregistering (local file changes: app/Main.hs)
haskell-jvm-hello-0.1.0.0: build
Preprocessing library haskell-jvm-hello-0.1.0.0...
In-place registering haskell-jvm-hello-0.1.0.0...
Preprocessing executable 'haskell-jvm-hello-exe' for
haskell-jvm-hello-0.1.0.0...
[1 of 1] Compiling Main             ( app/Main.hs, .stack-work/dist/x86_64-linux/Cabal-1.22.4.0_ghcjs/build/haskell-jvm-hello-exe/haskell-jvm-hello-exe-tmp/Main.js_o )
Linking .stack-work/dist/x86_64-linux/Cabal-1.22.4.0_ghcjs/build/haskell-jvm-hello-exe/haskell-jvm-hello-exe.jsexe (Main)
haskell-jvm-hello-0.1.0.0: copy/register
Installing library in
/workspace/haskell-jvm-hello/.stack-work/install/x86_64-linux/lts-3.12/ghcjs-0.2.0_ghc-7.10.3/lib/x86_64-linux-ghcjs-0.2.0-ghc7_10_3/haskell-jvm-hello-0.1.0.0-7MA0h74rERuEwiJY2TRuHx
Installing executable(s) in
/workspace/haskell-jvm-hello/.stack-work/install/x86_64-linux/lts-3.12/ghcjs-0.2.0_ghc-7.10.3/bin
Warning: the following files would be used as linker inputs, but linking is not being done: .stack-work/dist/x86_64-linux/Cabal-1.22.4.0_ghcjs/build/haskell-jvm-hello-exe/haskell-jvm-hello-exe
Registering haskell-jvm-hello-0.1.0.0...

$ jjs .stack-work/dist/x86_64-linux/Cabal-1.22.4.0_ghcjs/build/haskell-jvm-hello-exe/haskell-jvm-hello-exe.jsexe/all.js
1
2
3
4
5
</code></pre></div></div>

<p>Java’s Nashorn JavaScript engine opens up few more ways for the JVM to be polyglot and it is so good to have one of the best languages, Haskell, on the JVM. Actually it should also be possible to run PureScript as well in this way on the JVM but that is for another day. Happy Haskelling!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frege: Record accessors and mutators]]></title>
    <link href="http://localhost:4000/blog/2014/03/15/frege-record-accessors-and-mutators/"/>
    <updated>2014-03-15T20:41:00-04:00</updated>
    <id>http://localhost:4000/blog/2014/03/15/frege-record-accessors-and-mutators</id>
    <content type="html"><![CDATA[<p>Frege has built-in mechanism to access and mutate (non-destructive) record fields.</p>

<p>Consider the following type in Frege:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="o">=</span> <span class="kt">Point</span> <span class="p">{</span><span class="n">x</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">}</span>
<span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="o">::</span> <span class="o">*</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
<span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span>
</code></pre></div></div>

<p>Now we can use the following functions to get and set record fields:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span>
<span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Int</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="p">}</span>
<span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Point</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&lt;-</span> <span class="p">}</span>
<span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="o">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Point</span>
</code></pre></div></div>

<p>For Field <code class="language-plaintext highlighter-rouge">x</code>,</p>

<ol>
  <li>The function <code class="language-plaintext highlighter-rouge">Point.x</code> is the getter.</li>
  <li>The function <code class="language-plaintext highlighter-rouge">Point.{x = }</code> is a setter which sets the field <code class="language-plaintext highlighter-rouge">x</code> with a new value.</li>
  <li>The function <code class="language-plaintext highlighter-rouge">Point.{x &lt;- }</code> is also a setter but applies a function to update the current value.</li>
</ol>

<p>We can use the functions like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span>
<span class="n">value</span> <span class="n">p</span> <span class="o">::</span> <span class="kt">Point</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span>
<span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span> <span class="n">p</span>
<span class="mi">3</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span><span class="p">}</span> <span class="n">p</span> <span class="mi">13</span>
<span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&lt;-</span><span class="p">}</span> <span class="n">p</span> <span class="p">(</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span>
<span class="kt">Point</span> <span class="mi">18</span> <span class="mi">4</span>
</code></pre></div></div>

<p>Frege also provides some shortcuts to apply these functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span> <span class="c1">-- Same as `Point.x p`</span>
<span class="mi">3</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span> <span class="c1">-- Same as `Point.{x = } p 10`</span>
<span class="kt">Point</span> <span class="mi">10</span> <span class="mi">4</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&lt;-</span><span class="p">}</span> <span class="c1">-- Same as `Point.{x &lt;-} p`</span>
<span class="o">::</span> <span class="p">(</span><span class="kt">Int</span><span class="o">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Point</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">10</span><span class="p">)}</span> <span class="c1">-- Same as `Point.{x &lt;- } p (+10)`</span>
<span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span>
</code></pre></div></div>

<p>Multiple updates can be combined:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">8</span><span class="p">),</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">}</span> <span class="c1">-- Increment x by 8 and set y to 20</span>
<span class="kt">Point</span> <span class="mi">11</span> <span class="mi">20</span>
</code></pre></div></div>

<p>Accessors and updates can be at any level deep.
Let’s create another type:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="o">:</span><span class="p">{</span>
<span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Circle</span> <span class="o">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="o">::</span> <span class="kt">Point</span><span class="p">,</span> <span class="n">radius</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">}</span>
<span class="o">&gt;</span>
<span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Circle</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="p">}</span>

<span class="kr">data</span> <span class="kr">type</span> <span class="kt">Circle</span> <span class="o">::</span> <span class="o">*</span>
<span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Circle</span>

<span class="n">frege</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Here we have an aggregate type <code class="language-plaintext highlighter-rouge">Circle</code> which composes another type <code class="language-plaintext highlighter-rouge">Point</code> for it’s field <code class="language-plaintext highlighter-rouge">center</code>.
Now we can update and select fields at different levels:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="o">=</span> <span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">,</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>
<span class="n">value</span> <span class="n">c</span> <span class="o">::</span> <span class="kt">Circle</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span>
<span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">center</span><span class="o">.</span><span class="n">x</span>
<span class="mi">4</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">}}</span>
<span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">8</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">y</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">)},</span> <span class="n">radius</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="o">*</span><span class="mi">5</span><span class="p">)}</span>
<span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">25</span><span class="p">)</span> <span class="mi">50</span>
</code></pre></div></div>

<p>In the latest version, Frege provides syntactic sugar for lambdas using underscores. For example, <code class="language-plaintext highlighter-rouge">T.foo</code> can be written
as <code class="language-plaintext highlighter-rouge">_.foo</code> if the type can be deduced from the context the lambda is applied. Hence the following two are equivalent.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">}}</span>
<span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="o">&lt;-</span> <span class="kr">_</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">}}</span>
<span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</code></pre></div></div>

<p>Frege provides another utility to check for a field’s existence. This would be useful if we have multiple constructors
with different set of fields.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="o">:</span><span class="p">{</span>
<span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="o">=</span> <span class="kt">Point2d</span> <span class="p">{</span><span class="n">x</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">}</span>
<span class="o">&gt;</span>            <span class="o">|</span> <span class="kt">Point3d</span> <span class="p">{</span><span class="n">x</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">z</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">}</span>
<span class="o">&gt;</span>
<span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="p">}</span>

<span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="o">::</span> <span class="o">*</span>
<span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span>

<span class="n">frege</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>In the above code, we have two constructors <code class="language-plaintext highlighter-rouge">Point2d</code> and <code class="language-plaintext highlighter-rouge">Point3d</code> where the field <code class="language-plaintext highlighter-rouge">z</code> exists only for <code class="language-plaintext highlighter-rouge">Point3d</code>.
We can check for the existence of field <code class="language-plaintext highlighter-rouge">z</code> like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
<span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">=</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
<span class="n">true</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point2d</span> <span class="mi">3</span> <span class="mi">4</span>
<span class="n">false</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
<span class="n">value</span> <span class="n">p</span> <span class="o">::</span> <span class="kt">Point</span>

<span class="n">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
<span class="n">true</span>

</code></pre></div></div>

<p>For more details on how these field existence check, accessor and mutator functions are generated for a record type,
here is the link to Frege language reference: http://www.frege-lang.org/doc/Language.pdf.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frege: Hello Java]]></title>
    <link href="http://localhost:4000/blog/2013/07/10/frege-hello-java/"/>
    <updated>2013-07-10T11:00:00-04:00</updated>
    <id>http://localhost:4000/blog/2013/07/10/frege-hello-java</id>
    <content type="html"><![CDATA[<p>Here is a small code demonstrating Java interoperability in Frege:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="err">hellojava.</span><span class="nn">HelloJava</span> <span class="kr">where</span>
 
<span class="kr">data</span> <span class="kt">LinkedList</span> <span class="n">a</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="kt">LinkedList</span> <span class="kr">where</span>
    <span class="n">native</span> <span class="n">add</span> <span class="o">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">Bool</span>
    <span class="n">native</span> <span class="n">get</span> <span class="o">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span>
        <span class="kt">IndexOutOfBoundsException</span>
    <span class="n">native</span> <span class="n">new</span> <span class="o">::</span> <span class="nb">()</span> <span class="o">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
    
    <span class="n">fromFregeList</span> <span class="o">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">fromFregeList</span> <span class="n">xs</span> <span class="o">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">new</span> <span class="nb">()</span> <span class="o">&gt;&gt;=</span> <span class="n">loop</span> <span class="n">xs</span> <span class="kr">where</span>
        <span class="n">loop</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">jlist</span> <span class="o">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">add</span> <span class="n">jlist</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">loop</span> <span class="n">xs</span> <span class="n">jlist</span>
        <span class="n">loop</span> <span class="kt">[]</span> <span class="n">jlist</span> <span class="o">=</span> <span class="n">return</span> <span class="n">jlist</span>
        
<span class="n">plusTop</span> <span class="o">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Int</span><span class="p">)</span>
<span class="n">plusTop</span> <span class="n">xs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">a</span> <span class="o">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">0</span>
    <span class="n">b</span> <span class="o">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">1</span>
    <span class="n">return</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">a</span> <span class="o">&lt;*&gt;</span> <span class="n">b</span><span class="p">)</span>
 
<span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span>
<span class="n">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>

<span class="kr">data</span> <span class="kt">Exception</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">Exception</span>
<span class="n">derive</span> <span class="kt">Exceptional</span> <span class="kt">Exception</span>
 
<span class="kr">data</span> <span class="kt">NullPointerException</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">NullPointerException</span>
<span class="n">derive</span> <span class="kt">Exceptional</span> <span class="kt">NullPointerException</span>
 
<span class="n">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="o">::</span> <span class="kt">Throwable</span> <span class="o">-&gt;</span> <span class="kt">String</span>
 
<span class="n">main</span> <span class="kr">_</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">javaList</span> <span class="o">&lt;-</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">fromFregeList</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
    <span class="n">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="o">-&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="s">"Got a null pointer"</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span> 
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="o">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">exception</span> <span class="o">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</code></pre></div></div>

<p>We can observe the following things from the above code:</p>

<ol>
  <li>Making use of a Java class and its methods</li>
  <li>Using a Java object in a Frege function</li>
  <li>Using Java Exceptions in functions</li>
  <li>Handling Java exceptions</li>
</ol>

<h3 id="1-making-use-of-a-java-class-and-its-methods">1. Making use of a Java class and its methods:</h3>

<p>If a Java class is pure then without much effort, we can use that class in Frege. For example,</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span> <span class="kr">where</span>
    <span class="n">pure</span>  <span class="n">native</span> <span class="n">abs</span>                                  <span class="o">::</span> <span class="kt">Integer</span> <span class="o">-&gt;</span> <span class="kt">Integer</span>
    <span class="n">pure</span>  <span class="n">native</span> <span class="n">negate</span>                               <span class="o">::</span> <span class="kt">Integer</span> <span class="o">-&gt;</span> <span class="kt">Integer</span>
    <span class="n">pure</span>  <span class="n">native</span> <span class="n">valueOf</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span><span class="o">.</span><span class="n">valueOf</span> <span class="o">::</span> <span class="kt">Long</span> <span class="o">-&gt;</span> <span class="kt">Integer</span>
</code></pre></div></div>

<p>A Java class is declared with <code class="language-plaintext highlighter-rouge">data</code> declaration in Frege. The identifier after the <code class="language-plaintext highlighter-rouge">data</code> keyword
is the corresponding type for the Java class in Frege and the qualified Java class is identified after the <code class="language-plaintext highlighter-rouge">native</code>
keyword followed by the instance methods, static methods or even some Frege functions not defined in the
original Java class.</p>

<p>An important point here is that the instance methods on BigInteger take Integer as their
first argument which is the <code class="language-plaintext highlighter-rouge">this</code> reference on which the methods will be invoked.</p>

<p>Coming back to our original example, here 
we are trying to use the mutable Java class <code class="language-plaintext highlighter-rouge">java.util.LinkedList</code>.
An obvious difference between this one and the <code class="language-plaintext highlighter-rouge">BigInteger</code> example is that the 
functions now do not have the <code class="language-plaintext highlighter-rouge">pure</code> keyword in front.</p>

<p>The next difference is that the instance methods now cannot take the simple type like <code class="language-plaintext highlighter-rouge">LinkedList a</code> as we did for
<code class="language-plaintext highlighter-rouge">Integer</code> but the type is now <code class="language-plaintext highlighter-rouge">Mutable s (LinkedList a)</code> since it is not a pure function.
If we don’t annotate a native function <code class="language-plaintext highlighter-rouge">pure</code> and we don’t use <code class="language-plaintext highlighter-rouge">Mutable</code> to consume or return a mutable Object, it will be a 
compilation error. Mutable objects can only be used in <code class="language-plaintext highlighter-rouge">ST</code> or <code class="language-plaintext highlighter-rouge">IO</code> actions so the return type 
must be in ST or IO monad.</p>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html#add(E\)">LinkedList.add()</a> method returns a boolean. Since
it is an impure function, it should be used in <code class="language-plaintext highlighter-rouge">ST</code> monad. Here the boolean itself is pure so it is just <code class="language-plaintext highlighter-rouge">ST s Bool</code>.
Take a look at the third function <code class="language-plaintext highlighter-rouge">new</code>, <code class="language-plaintext highlighter-rouge">LinkedList</code> constructor. This function is impure and it returns
a mutable object, a new <code class="language-plaintext highlighter-rouge">LinkedList</code> instance, so the return type is <code class="language-plaintext highlighter-rouge">ST s (Mutable s (LinkedList a))</code> for which the shorthand is <code class="language-plaintext highlighter-rouge">STMutable s (LinkedList a)</code>.</p>

<p>Here is an example for a native function not being part of a native
<code class="language-plaintext highlighter-rouge">data</code> declaration. This is useful when a native class is already
declared in Frege in some module but the function that we are looking
for is missing in the <code class="language-plaintext highlighter-rouge">data</code> declaration.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="o">::</span> <span class="kt">Throwable</span> <span class="o">-&gt;</span> <span class="kt">String</span>
</code></pre></div></div>

<p>Here <code class="language-plaintext highlighter-rouge">showThrowable</code> is the Frege function name for <code class="language-plaintext highlighter-rouge">Throwable.toString()</code>. Since it is an
instance method on <code class="language-plaintext highlighter-rouge">Throwable</code>, the first argument is of type
<code class="language-plaintext highlighter-rouge">Throwable</code> and then the formal arguments’ types (in this case, none) and return type.</p>

<h3 id="2-using-a-java-object-in-a-frege-function">2. Using a Java object in a Frege function</h3>

<p>A native <code class="language-plaintext highlighter-rouge">data</code> declaration doesn’t have to just contain the native members, it can also have
additional Frege functions. 
In our example, the function <code class="language-plaintext highlighter-rouge">fromFregeList</code> is not defined in
the Java class but it has been added as an utility function to create a <code class="language-plaintext highlighter-rouge">LinkedList</code> from a frege list.
Here again the same rule as in the previous section applies: To return a mutable Java object, 
we should use <code class="language-plaintext highlighter-rouge">ST s (Mutable s TheJavaType)</code> which is nothing but <code class="language-plaintext highlighter-rouge">STMutable s TheJavaType</code>.</p>

<p>In the same way, the <code class="language-plaintext highlighter-rouge">plusTop</code> function takes a mutable Java object so the parameter type is
<code class="language-plaintext highlighter-rouge">Mutable s (LinkedList Int)</code>. Also since it consumes a mutable type, it must be in <code class="language-plaintext highlighter-rouge">ST</code> monad hence 
the return type is <code class="language-plaintext highlighter-rouge">ST s (Maybe Int)</code> returning an <code class="language-plaintext highlighter-rouge">Maybe Int</code> in <code class="language-plaintext highlighter-rouge">ST</code>.</p>

<h3 id="3-using-java-exceptions-in-functions">3. Using Java Exceptions in functions</h3>

<p>To use a Java Exception class, it must be first defined in a Frege
module. It is the same as declaring native declaration for a Java class but 
additionally we need to derive the <code class="language-plaintext highlighter-rouge">Exceptional</code> type class so that the exception can later be handled with
<code class="language-plaintext highlighter-rouge">catch</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="o">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span>

<span class="n">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>
</code></pre></div></div>

<p>The exceptions can then be used in native declarations as in <code class="language-plaintext highlighter-rouge">get</code> function in our example:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">native</span> <span class="n">get</span> <span class="o">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span>
    <span class="kt">IndexOutOfBoundsException</span>
</code></pre></div></div>

<h3 id="4-handling-java-exceptions">4. Handling Java exceptions</h3>

<p>In two ways, we can handle exceptions:</p>

<ol>
  <li>
    <p>Using <code class="language-plaintext highlighter-rouge">action `catch` handler1 `catch` handler2</code></p>

    <p>The type of <code class="language-plaintext highlighter-rouge">catch</code> is <code class="language-plaintext highlighter-rouge">Exceptional β =&gt; ST γ α -&gt; (β-&gt;ST γ α) -&gt; ST γ α</code>.</p>

    <p>Here the <code class="language-plaintext highlighter-rouge">action</code> is the code where an exception might be thrown
and the handlers <code class="language-plaintext highlighter-rouge">handler1</code> and <code class="language-plaintext highlighter-rouge">handler2</code> take an exception and
return another value in <code class="language-plaintext highlighter-rouge">ST</code> monad. The infix notation facilitates
adding multiple handlers with better readability. Further here the
<code class="language-plaintext highlighter-rouge">handler1</code> must be more specific(in terms of the types of the
exceptions being handled) than <code class="language-plaintext highlighter-rouge">handler2</code>. Also note that from <a href="https://github.com/Frege/frege/blob/master/frege/prelude/PreludeIO.fr#L116">Frege standard library</a> with respect to <code class="language-plaintext highlighter-rouge">catch</code>:</p>

    <blockquote>
      <p><strong>Note</strong> If <em>action</em> is of the form:
   <code class="language-plaintext highlighter-rouge">doSomething arg</code>
then, depending on the strictness of <code class="language-plaintext highlighter-rouge">doSomething</code> the argument <code class="language-plaintext highlighter-rouge">arg</code> may be evaluated
<strong>before</strong> the action is returned. Exceptions (i.e. undefined values) 
that occur in the construction of the action do <strong>not</strong> count as 
exceptions thrown during execution of it, and hence cannot be catched.</p>
    </blockquote>

    <blockquote>
      <p>Example:
<code class="language-plaintext highlighter-rouge">println (head []) `catch`  ....</code></p>
    </blockquote>

    <blockquote>
      <p>will not catch the exception that will be thrown when println evaluates</p>
    </blockquote>

    <blockquote>
      <p>For a remedy, see <code class="language-plaintext highlighter-rouge">try</code>.</p>
    </blockquote>
  </li>
  <li>
    <p>Using <code class="language-plaintext highlighter-rouge">try</code></p>

    <p>First, the type: <code class="language-plaintext highlighter-rouge">try :: Monad γ =&gt; (α-&gt; γ β) -&gt; α -&gt; γ β</code></p>

    <p>Unlike <code class="language-plaintext highlighter-rouge">catch</code>, <code class="language-plaintext highlighter-rouge">try</code> takes a function that produces a monadic value. If
the function can throw an exception, it must result in an <code class="language-plaintext highlighter-rouge">ST</code>
monad which can then be passed to <code class="language-plaintext highlighter-rouge">catch</code> to handle those
exceptions. In our example, <code class="language-plaintext highlighter-rouge">\xs -&gt; plusTop xs &gt;&gt;= (println . maybe "Got a null pointer"
show)</code> is the function which when applied to a
<code class="language-plaintext highlighter-rouge">java.util.LinkedList</code> might throw a <code class="language-plaintext highlighter-rouge">NullPointerException</code> or
<code class="language-plaintext highlighter-rouge">IndexOutOfBoundsException</code>:</p>

    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="o">-&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="s">"Got a null pointer"</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span>
    <span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="o">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
    <span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">exception</span> <span class="o">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Since the construction of action is deferred through a lambda
here, <code class="language-plaintext highlighter-rouge">try</code> eliminates the issue with <code class="language-plaintext highlighter-rouge">catch</code> mentioned in the above note.</p>

<p>###Extending a class or implementing an interface in Frege:</p>

<p>One thing that is not shown in the example is extending a Java class
or implementing an interface in Frege. Unfortunately both are not possible in Frege
yet. There is a workaround though using a Java class which extends a
class or implements an interface but instead of an implementation on
its own, it just delegates to a Frege function. For example, see
<a href="https://github.com/Frege/frege/blob/master/frege/java/Lang.fr#L89">here</a>
for implementing <code class="language-plaintext highlighter-rouge">java.lang.Runnable</code> in Frege using a Java class
<a href="https://github.com/Frege/frege/blob/master/frege/runtime/SwingSupport.java#L56">frege.runtime.SwingSupport</a> which takes a Frege function and then
delegates to it in <code class="language-plaintext highlighter-rouge">run</code> method implementation.</p>

<p>This concludes our little experimentation calling Java from Frege. The
other interesting side, calling Frege from Java, is for a
future post.</p>
]]></content>
  </entry>
  
</feed>
