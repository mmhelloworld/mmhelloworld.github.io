<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mmhelloworld]]></title>
  <link href="http://mmhelloworld.github.io/atom.xml" rel="self"/>
  <link href="http://mmhelloworld.github.io/"/>
  <updated>2016-02-28T13:30:20-05:00</updated>
  <id>http://mmhelloworld.github.io/</id>
  <author>
    <name><![CDATA[Marimuthu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell on the JVM via GHCJS and Nashorn]]></title>
    <link href="http://mmhelloworld.github.io/blog/2016/02/27/haskell-on-the-jvm-via-ghcjs-and-nashorn/"/>
    <updated>2016-02-27T19:56:00-05:00</updated>
    <id>http://mmhelloworld.github.io/blog/2016/02/27/haskell-on-the-jvm-via-ghcjs-and-nashorn</id>
    <content type="html"><![CDATA[<p>Currently there are 2 ways we can write Haskell on the JVM:</p>

<ol>
<li><a href="https://github.com/Frege/frege">Frege</a>, a language that follows Haskell 2010 standard and compiles to Java.</li>
<li>Haskell itself by compiling it to JavaScript via GHCJS.</li>
</ol>


<p>Frege is basically a Haskell for the JVM and infact conforms to Haskell 2010 with few inbuilt GHC extensions. Even with good Java interop, it doesn&rsquo;t sacrifice its type guarantees and currently is the only pure language on the JVM.</p>

<p>In this post, I am going to explore another interesting option: Haskell itself on the JVM. Haskell can be compiled to JavaScript using GHCJS and Java has an inbuilt JavaScript engine, called Nashorn so it is actually possible to compile Haskell to JavaScript and run the resulting JavaScript on the JVM.</p>

<p>Here is a simple Haskell code that can be run on the JVM:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>
</span><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Nashorn doesn&#39;t provide default console object. Haskell&#39;s putStrLn logs to the console.</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;console={ </span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> log: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> info: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> warn: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> debug: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> error: function(s) { java.lang.System.err.print(s); }</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> }&quot;</span>
</span><span class='line'>  <span class="n">setupConsole</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;java.lang.System.exit($1)&quot;</span>
</span><span class='line'>  <span class="n">sysexit</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">setupConsole</span>
</span><span class='line'>  <span class="n">putStrLn</span> <span class="s">&quot;Hello from Haskell!&quot;</span>
</span><span class='line'>  <span class="n">sysexit</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nashorn doesn&rsquo;t have an inbuilt <code>console</code> object and Haskell&rsquo;s <code>putStrLn</code> prints to the console so we have to provide an implementation of console. The implementation, as can be seen from the code above, is actually backed by Java&rsquo;s <code>System.out.print</code>. That is our first example of calling Java from Haskell. <code>sysexit</code> is another function calling Java. <code>sysexit</code> is needed here as otherwise the program just keeps on running which I think is because of JavaScript event loop or something similar that prevents the JVM from shutting down.</p>

<h3>Compiling Haskell with GHCJS and running on JVM</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ghcjs -o HelloJava HelloJava.hs
</span><span class='line'>[1 of 1] Compiling Main             ( HelloJava.hs, HelloJava.js_o )
</span><span class='line'>Linking HelloJava.jsexe (Main)
</span><span class='line'>
</span><span class='line'>$ jjs HelloJava.jsexe/all.js 
</span><span class='line'>Hello from Haskell!</span></code></pre></td></tr></table></div></figure>


<p><code>jjs</code> is a JVM laucher for JavaScript code similar to Node. It is also possible to run this as a regular Java program along with other Java classes without <code>jjs</code>. <code>jjs</code> is just a convenient way  to run just JavaScript code on the JVM. Above GHCJS compiles the Haskell code to JavaScript in one file <code>all.js</code> and the JVM runs the JavaScript code from <code>all.js</code>.</p>

<h3>Example 2</h3>

<p>Now let&rsquo;s look at another example that shows how to convert between Haskell and Java lists:</p>

<figure class='code'><figcaption><span>Converstion between Haskell and Java Lists  (HaskellJavaListsConversion.hs)</span> <a href='http://mmhelloworld.github.io/downloads/code/HaskellJavaListsConversion.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE ForeignFunctionInterface #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE JavaScriptFFI #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE UnliftedFFITypes #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE GHCForeignImportPrim #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE TypeSynonymInstances #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE FlexibleInstances #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE DataKinds #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE PolyKinds #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE DeriveDataTypeable #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE TypeFamilies #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad.ST</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHCJS.Types</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHCJS.Foreign</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHCJS.Prim</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Typeable</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHC.ST</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">MutabilityType</span> <span class="n">s</span> <span class="ow">=</span> <span class="kt">Mutable</span>
</span><span class='line'>                      <span class="o">|</span> <span class="kt">Immutable</span>
</span><span class='line'>                      <span class="o">|</span> <span class="kt">STMutable</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">IsItMutable</span> <span class="ow">=</span> <span class="kt">IsImmutable</span>
</span><span class='line'>                 <span class="o">|</span> <span class="kt">IsMutable</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Copied from GHCJS.Internal.Types. Not sure why this is not exposed.</span>
</span><span class='line'><span class="kr">type</span> <span class="n">family</span> <span class="kt">Mutability</span> <span class="p">(</span><span class="n">a</span> <span class="ow">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">IsItMutable</span> <span class="kr">where</span>
</span><span class='line'>  <span class="kt">Mutability</span> <span class="kt">Immutable</span>     <span class="ow">=</span> <span class="kt">IsImmutable</span>
</span><span class='line'>  <span class="kt">Mutability</span> <span class="kt">Mutable</span>       <span class="ow">=</span> <span class="kt">IsMutable</span>
</span><span class='line'>  <span class="kt">Mutability</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">IsMutable</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{- java.util.ArrayList class and its methods -}</span>
</span><span class='line'><span class="kr">newtype</span> <span class="kt">SomeArrayList</span> <span class="p">(</span><span class="n">a</span> <span class="ow">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">SomeArrayList</span> <span class="kt">JSVal</span> <span class="kr">deriving</span> <span class="kt">Typeable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">ArrayList</span>           <span class="ow">=</span> <span class="kt">SomeArrayList</span> <span class="kt">Immutable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">MutableArrayList</span>    <span class="ow">=</span> <span class="kt">SomeArrayList</span> <span class="kt">Mutable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">STArrayList</span> <span class="n">s</span>      <span class="ow">=</span> <span class="kt">SomeArrayList</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">IsJSVal</span> <span class="p">(</span><span class="kt">SomeArrayList</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- ArrayList Constructor</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;new $1()&quot;</span>
</span><span class='line'>  <span class="n">arrayList_new</span> <span class="ow">::</span> <span class="kt">JType</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Adds an element to ArrayList</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;$2.add($1)&quot;</span>
</span><span class='line'>  <span class="n">arrayList_add</span> <span class="ow">::</span> <span class="kt">JSVal</span> <span class="ow">-&gt;</span>  <span class="kt">STArrayList</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{- java.util.Iterator class and its methods -}</span>
</span><span class='line'><span class="kr">newtype</span> <span class="kt">SomeIterator</span> <span class="p">(</span><span class="n">a</span> <span class="ow">::</span> <span class="kt">MutabilityType</span> <span class="n">s</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">SomeIterator</span> <span class="kt">JSVal</span> <span class="kr">deriving</span> <span class="kt">Typeable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">Iterator</span>            <span class="ow">=</span> <span class="kt">SomeIterator</span> <span class="kt">Immutable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">MutableIterator</span>     <span class="ow">=</span> <span class="kt">SomeIterator</span> <span class="kt">Mutable</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">STIterator</span> <span class="n">s</span>        <span class="ow">=</span> <span class="kt">SomeIterator</span> <span class="p">(</span><span class="kt">STMutable</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">IsJSVal</span> <span class="p">(</span><span class="kt">SomeIterator</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Create an Iterator from an ArrayList</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;$1.iterator()&quot;</span>
</span><span class='line'>  <span class="n">iterator</span> <span class="ow">::</span> <span class="kt">STArrayList</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STIterator</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;$1.hasNext()&quot;</span>
</span><span class='line'>  <span class="n">iterator_hasNext</span> <span class="ow">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">Bool</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;$1.next()&quot;</span>
</span><span class='line'>  <span class="n">iterator_next</span> <span class="ow">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">JSVal</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{- Other Nashorn imports -}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Represents a Java type</span>
</span><span class='line'><span class="kr">newtype</span> <span class="kt">JType</span> <span class="ow">=</span> <span class="kt">JType</span> <span class="kt">JSVal</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;java.lang.System.out.println($1)&quot;</span>
</span><span class='line'>  <span class="n">jprintln</span> <span class="ow">::</span> <span class="kt">JSVal</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;java.lang.System.exit($1)&quot;</span>
</span><span class='line'>  <span class="n">sysexit</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Imports a Java class</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;Java.type($1)&quot;</span>
</span><span class='line'>  <span class="n">jimport</span> <span class="ow">::</span> <span class="kt">JSVal</span> <span class="ow">-&gt;</span> <span class="kt">JType</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{- Create an instance of Java&#39;s ArrayList from Haskell&#39;s list -}</span>
</span><span class='line'><span class="nf">listToArrayList</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">JSVal</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="nf">listToArrayList</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">arrayListClass</span> <span class="ow">=</span> <span class="n">jimport</span> <span class="o">$</span> <span class="n">toJSString</span> <span class="s">&quot;java.util.ArrayList&quot;</span>
</span><span class='line'>    <span class="n">arrList</span> <span class="ow">&lt;-</span> <span class="n">arrayList_new</span> <span class="n">arrayListClass</span>
</span><span class='line'>    <span class="n">go</span> <span class="n">xs</span> <span class="n">arrList</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">go</span> <span class="kt">[]</span> <span class="n">arrList</span> <span class="ow">=</span> <span class="n">return</span> <span class="n">arrList</span>
</span><span class='line'>    <span class="n">go</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">arrList</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">arrayList_add</span> <span class="n">x</span> <span class="n">arrList</span>
</span><span class='line'>      <span class="n">go</span> <span class="n">xs</span> <span class="n">arrList</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{- Create Haskell&#39;s list from Java&#39;s Iterator -}</span>
</span><span class='line'><span class="nf">iteratorToList</span> <span class="ow">::</span> <span class="kt">STIterator</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">[</span><span class="kt">JSVal</span><span class="p">]</span>
</span><span class='line'><span class="nf">iteratorToList</span> <span class="n">itr</span> <span class="ow">=</span> <span class="n">reverse</span> <span class="o">&lt;$&gt;</span> <span class="n">go</span> <span class="kt">[]</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">go</span> <span class="n">acc</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">hasNext</span> <span class="ow">&lt;-</span> <span class="n">iterator_hasNext</span> <span class="n">itr</span>
</span><span class='line'>    <span class="kr">if</span> <span class="n">hasNext</span>
</span><span class='line'>      <span class="kr">then</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">next</span> <span class="ow">&lt;-</span> <span class="n">iterator_next</span> <span class="n">itr</span>
</span><span class='line'>        <span class="n">go</span> <span class="p">(</span><span class="n">next</span><span class="kt">:</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'>      <span class="kr">else</span>
</span><span class='line'>        <span class="n">return</span> <span class="n">acc</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Nashorn doesn&#39;t provide default console object. Haskell&#39;s putStrLn logs to the console.</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;console={ </span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> log: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> info: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> warn: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> debug: function(s) { java.lang.System.out.print(s); },</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> error: function(s) { java.lang.System.err.print(s); }</span><span class="se">\</span>
</span><span class='line'><span class="se">    \</span><span class="s"> }&quot;</span>
</span><span class='line'>  <span class="n">setupConsole</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>
</span><span class='line'><span class="nf">demo</span> <span class="ow">=</span> <span class="n">runST</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">jlist</span> <span class="ow">&lt;-</span> <span class="n">listToArrayList</span> <span class="o">.</span> <span class="n">map</span> <span class="n">toJSInt</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>  <span class="n">iterator</span> <span class="n">jlist</span> <span class="o">&gt;&gt;=</span> <span class="n">iteratorToList</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">setupConsole</span>
</span><span class='line'>  <span class="n">mapM_</span> <span class="p">(</span><span class="n">putStrLn</span> <span class="o">.</span> <span class="n">show</span> <span class="o">.</span> <span class="n">fromJSInt</span><span class="p">)</span> <span class="n">demo</span>
</span><span class='line'>  <span class="n">sysexit</span> <span class="mi">0</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, two Java types are used: <code>java.util.ArrayList</code> and <code>java.util.Iterator</code>.</p>

<h4>Importing a Java class</h4>

<p>A Java class can be imported with <code>Java.type(className)</code> Nashorn JavaScript code. Line 80 defines the corresponding Haskell FFI function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Imports a Java class</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;Java.type($1)&quot;</span>
</span><span class='line'>  <span class="n">jimport</span> <span class="ow">::</span> <span class="kt">JSVal</span> <span class="ow">-&gt;</span> <span class="kt">JType</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating an instance of a Java class</h4>

<p>An instance can be created by invoking the constructor on the Java class with <code>new</code>. Here is the corresponding FFI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- ArrayList Constructor</span>
</span><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">javascript</span> <span class="n">unsafe</span> <span class="s">&quot;new $1()&quot;</span>
</span><span class='line'>  <span class="n">arrayList_new</span> <span class="ow">::</span> <span class="kt">JType</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">STArrayList</span> <span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes the <code>ArrayList</code> class and invokes the dafault <code>ArrayList</code> constructor to return an instance of it. In the same way, we can create FFI functions for <code>ArrayList.add</code> and <code>ArrayList.iterator</code> to return an Java <code>Iterator</code> instance.</p>

<p>The function <code>listToArrayList</code> takes a Haskell list and return an instance of Java <code>ArrayList</code>. As the java list is mutable, it is returned as <code>STArrayList s</code> inside <code>ST</code>. This function first creates an instance of <code>ArrayList</code> by invoking the Java constructor and then calls <code>ArrayList.add</code> to add items from Haskell list to the <code>ArrayList</code>.</p>

<p>In the similar way, the function <code>iteratorToList</code> takes a Java <code>iterator</code> and returns Haskell list by extracting items from the iterator by invoking corresponding FFI functions for <code>Iterator.hasNext</code> and <code>Iterator.next</code>.</p>

<h3>Building with <code>Stack</code></h3>

<p>It is easy to <a href="http://docs.haskellstack.org/en/stable/ghcjs/">setup a GHCJS project with <code>Stack</code></a> so that we can add other dependencies easily and build it for GHCJS. With the above code in a stack project &ldquo;haskell-jvm-hello&rdquo;, we can build it with <code>stack build</code> and run it with <code>jjs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">$</span> <span class="n">stack</span> <span class="n">build</span>
</span><span class='line'><span class="nf">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="kt">:</span> <span class="n">unregistering</span> <span class="p">(</span><span class="n">local</span> <span class="n">file</span> <span class="n">changes</span><span class="kt">:</span> <span class="n">app</span><span class="o">/</span><span class="kt">Main</span><span class="o">.</span><span class="n">hs</span><span class="p">)</span>
</span><span class='line'><span class="nf">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="kt">:</span> <span class="n">build</span>
</span><span class='line'><span class="kt">Preprocessing</span> <span class="n">library</span> <span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="o">...</span>
</span><span class='line'><span class="kt">In</span><span class="o">-</span><span class="n">place</span> <span class="n">registering</span> <span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="o">...</span>
</span><span class='line'><span class="kt">Preprocessing</span> <span class="n">executable</span> <span class="n">&#39;haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe&#39;</span> <span class="n">for</span>
</span><span class='line'><span class="nf">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="kr">of</span> <span class="mi">1</span><span class="p">]</span> <span class="kt">Compiling</span> <span class="kt">Main</span>             <span class="p">(</span> <span class="n">app</span><span class="o">/</span><span class="kt">Main</span><span class="o">.</span><span class="n">hs</span><span class="p">,</span> <span class="o">.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">dist</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="kt">Cabal</span><span class="o">-</span><span class="mf">1.22</span><span class="o">.</span><span class="mf">4.0</span><span class="n">_ghcjs</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">-</span><span class="n">tmp</span><span class="o">/</span><span class="kt">Main</span><span class="o">.</span><span class="n">js_o</span> <span class="p">)</span>
</span><span class='line'><span class="kt">Linking</span> <span class="o">.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">dist</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="kt">Cabal</span><span class="o">-</span><span class="mf">1.22</span><span class="o">.</span><span class="mf">4.0</span><span class="n">_ghcjs</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">.</span><span class="n">jsexe</span> <span class="p">(</span><span class="kt">Main</span><span class="p">)</span>
</span><span class='line'><span class="nf">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="kt">:</span> <span class="n">copy</span><span class="o">/</span><span class="n">register</span>
</span><span class='line'><span class="kt">Installing</span> <span class="n">library</span> <span class="kr">in</span>
</span><span class='line'><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">/.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">install</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="n">lts</span><span class="o">-</span><span class="mf">3.12</span><span class="o">/</span><span class="n">ghcjs</span><span class="o">-</span><span class="mf">0.2</span><span class="o">.</span><span class="mi">0</span><span class="n">_ghc</span><span class="o">-</span><span class="mf">7.10</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ghcjs</span><span class="o">-</span><span class="mf">0.2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">ghc7_10_3</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="o">-</span><span class="mi">7</span><span class="kt">MA0h74rERuEwiJY2TRuHx</span>
</span><span class='line'><span class="kt">Installing</span> <span class="n">executable</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="kr">in</span>
</span><span class='line'><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">/.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">install</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="n">lts</span><span class="o">-</span><span class="mf">3.12</span><span class="o">/</span><span class="n">ghcjs</span><span class="o">-</span><span class="mf">0.2</span><span class="o">.</span><span class="mi">0</span><span class="n">_ghc</span><span class="o">-</span><span class="mf">7.10</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span>
</span><span class='line'><span class="kt">Warning:</span> <span class="n">the</span> <span class="n">following</span> <span class="n">files</span> <span class="n">would</span> <span class="n">be</span> <span class="n">used</span> <span class="n">as</span> <span class="n">linker</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">but</span> <span class="n">linking</span> <span class="n">is</span> <span class="n">not</span> <span class="n">being</span> <span class="n">done</span><span class="kt">:</span> <span class="o">.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">dist</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="kt">Cabal</span><span class="o">-</span><span class="mf">1.22</span><span class="o">.</span><span class="mf">4.0</span><span class="n">_ghcjs</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span>
</span><span class='line'><span class="kt">Registering</span> <span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">$</span> <span class="n">jjs</span> <span class="o">.</span><span class="n">stack</span><span class="o">-</span><span class="n">work</span><span class="o">/</span><span class="n">dist</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">/</span><span class="kt">Cabal</span><span class="o">-</span><span class="mf">1.22</span><span class="o">.</span><span class="mf">4.0</span><span class="n">_ghcjs</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">/</span><span class="n">haskell</span><span class="o">-</span><span class="n">jvm</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">exe</span><span class="o">.</span><span class="n">jsexe</span><span class="o">/</span><span class="n">all</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java&rsquo;s Nashorn JavaScript engine opens up few more ways for the JVM to be polyglot and it is so good to have one of the best languages, Haskell, on the JVM. Actually it should also be possible to run PureScript as well in this way on the JVM but that is for another day. Happy Haskelling!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Java in Firefox Ubuntu]]></title>
    <link href="http://mmhelloworld.github.io/blog/2015/07/21/enabling-java-in-firefox-ubuntu/"/>
    <updated>2015-07-21T01:00:00-04:00</updated>
    <id>http://mmhelloworld.github.io/blog/2015/07/21/enabling-java-in-firefox-ubuntu</id>
    <content type="html"><![CDATA[<ol>
<li>Download Java <code>jdk-&lt;version&gt;-linux-x64.tar.gz</code> (for 64 bit)</li>
<li>Extract the archive</li>
<li>Run <code>ln -sf /path/to/jdk/jre/lib/amd64/libnpjp2.so ~/.mozilla/plugins/</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frege: Record accessors and mutators]]></title>
    <link href="http://mmhelloworld.github.io/blog/2014/03/15/frege-record-accessors-and-mutators/"/>
    <updated>2014-03-15T20:41:00-04:00</updated>
    <id>http://mmhelloworld.github.io/blog/2014/03/15/frege-record-accessors-and-mutators</id>
    <content type="html"><![CDATA[<p>Frege has built-in mechanism to access and mutate (non-destructive) record fields.</p>

<p>Consider the following type in Frege:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="ow">::</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use the following functions to get and set record fields:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Point</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="ow">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Point</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Field <code>x</code>,</p>

<ol>
<li>The function <code>Point.x</code> is the getter.</li>
<li>The function <code>Point.{x = }</code> is a setter which sets the field <code>x</code> with a new value.</li>
<li>The function <code>Point.{x &lt;- }</code> is also a setter but applies a function to update the current value.</li>
</ol>


<p>We can use the functions like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="nf">value</span> <span class="n">p</span> <span class="ow">::</span> <span class="kt">Point</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="n">x</span> <span class="n">p</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span><span class="p">}</span> <span class="n">p</span> <span class="mi">13</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">&lt;-</span><span class="p">}</span> <span class="n">p</span> <span class="p">(</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">18</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Frege also provides some shortcuts to apply these functions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span> <span class="c1">-- Same as `Point.x p`</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">10</span><span class="p">}</span> <span class="c1">-- Same as `Point.{x = } p 10`</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">10</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">&lt;-</span><span class="p">}</span> <span class="c1">-- Same as `Point.{x &lt;-} p`</span>
</span><span class='line'><span class="ow">::</span> <span class="p">(</span><span class="kt">Int</span><span class="ow">-&gt;</span><span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Point</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">10</span><span class="p">)}</span> <span class="c1">-- Same as `Point.{x &lt;- } p (+10)`</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">13</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple updates can be combined:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">8</span><span class="p">),</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">20</span><span class="p">}</span> <span class="c1">-- Increment x by 8 and set y to 20</span>
</span><span class='line'><span class="kt">Point</span> <span class="mi">11</span> <span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessors and updates can be at any level deep.
Let&rsquo;s create another type:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">:</span><span class="p">{</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Circle</span> <span class="ow">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="ow">::</span> <span class="kt">Point</span><span class="p">,</span> <span class="n">radius</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Circle</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kt">:</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Circle</span> <span class="ow">::</span> <span class="o">*</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Circle</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have an aggregate type <code>Circle</code> which composes another type <code>Point</code> for it&rsquo;s field <code>center</code>.
Now we can update and select fields at different levels:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span> <span class="ow">=</span> <span class="kt">Circle</span> <span class="p">{</span><span class="n">center</span> <span class="ow">=</span> <span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">,</span> <span class="n">radius</span> <span class="ow">=</span> <span class="mi">10</span><span class="p">}</span>
</span><span class='line'><span class="nf">value</span> <span class="n">c</span> <span class="ow">::</span> <span class="kt">Circle</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">center</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="ow">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">8</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">8</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="ow">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">)},</span> <span class="n">radius</span> <span class="ow">&lt;-</span> <span class="p">(</span><span class="o">*</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">4</span> <span class="mi">25</span><span class="p">)</span> <span class="mi">50</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the latest version, Frege provides syntactic sugar for lambdas using underscores. For example, <code>T.foo</code> can be written
as <code>_.foo</code> if the type can be deduced from the context the lambda is applied. Hence the following two are equivalent.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="ow">&lt;-</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">25</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="p">{</span><span class="n">center</span> <span class="ow">&lt;-</span> <span class="kr">_</span><span class="o">.</span><span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">25</span><span class="p">}}</span>
</span><span class='line'><span class="kt">Circle</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">25</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Frege provides another utility to check for a field&rsquo;s existence. This would be useful if we have multiple constructors
with different set of fields.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">:</span><span class="p">{</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="ow">=</span> <span class="kt">Point2d</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>            <span class="o">|</span> <span class="kt">Point3d</span> <span class="p">{</span><span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">z</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">derive</span> <span class="kt">Show</span> <span class="kt">Point</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kt">:</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kr">type</span> <span class="kt">Point</span> <span class="ow">::</span> <span class="o">*</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">Show</span>  <span class="kt">Point</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code, we have two constructors <code>Point2d</code> and <code>Point3d</code> where the field <code>z</code> exists only for <code>Point3d</code>.
We can check for the existence of field <code>z</code> like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
</span><span class='line'><span class="ow">::</span> <span class="kt">Point</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="ow">=</span> <span class="kt">Point</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
</span><span class='line'><span class="nf">true</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">hasZ</span> <span class="o">$</span> <span class="kt">Point2d</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="nf">false</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="kt">Point3d</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
</span><span class='line'><span class="nf">value</span> <span class="n">p</span> <span class="ow">::</span> <span class="kt">Point</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frege</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">.</span><span class="p">{</span><span class="n">z</span><span class="o">?</span><span class="p">}</span>
</span><span class='line'><span class="nf">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details on how these field existence check, accessor and mutator functions are generated for a record type,
here is the link to Frege language reference: <a href="http://www.frege-lang.org/doc/Language.pdf.">http://www.frege-lang.org/doc/Language.pdf.</a></p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frege: Hello Java]]></title>
    <link href="http://mmhelloworld.github.io/blog/2013/07/10/frege-hello-java/"/>
    <updated>2013-07-10T11:00:00-04:00</updated>
    <id>http://mmhelloworld.github.io/blog/2013/07/10/frege-hello-java</id>
    <content type="html"><![CDATA[<p>Here is a small code demonstrating Java interoperability in Frege:</p>

<figure class='code'><figcaption><span>Calling Java from Frege  (HelloJava.fr)</span> <a href='http://mmhelloworld.github.io/downloads/code/HelloJava.fr'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="err">hellojava.</span><span class="nn">HelloJava</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">LinkedList</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="kt">LinkedList</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">add</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">get</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span>
</span><span class='line'>        <span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'>    <span class="n">native</span> <span class="n">new</span> <span class="ow">::</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fromFregeList</span> <span class="ow">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">STMutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fromFregeList</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">new</span> <span class="nb">()</span> <span class="o">&gt;&gt;=</span> <span class="n">loop</span> <span class="n">xs</span> <span class="kr">where</span>
</span><span class='line'>        <span class="n">loop</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">jlist</span> <span class="ow">=</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">add</span> <span class="n">jlist</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">loop</span> <span class="n">xs</span> <span class="n">jlist</span>
</span><span class='line'>        <span class="n">loop</span> <span class="kt">[]</span> <span class="n">jlist</span> <span class="ow">=</span> <span class="n">return</span> <span class="n">jlist</span>
</span><span class='line'>
</span><span class='line'><span class="nf">plusTop</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class='line'><span class="nf">plusTop</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="o">.</span><span class="n">get</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">return</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">a</span> <span class="o">&lt;*&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Exception</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">Exception</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">Exception</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">NullPointerException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">NullPointerException</span>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">NullPointerException</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="ow">::</span> <span class="kt">Throwable</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">javaList</span> <span class="ow">&lt;-</span> <span class="kt">LinkedList</span><span class="o">.</span><span class="n">fromFregeList</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="n">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="s">&quot;Got a null pointer&quot;</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span>
</span><span class='line'>        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="ow">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
</span><span class='line'>        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">exception</span> <span class="ow">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can observe the following things from the above code:</p>

<ol>
<li>Making use of a Java class and its methods</li>
<li>Using a Java object in a Frege function</li>
<li>Using Java Exceptions in functions</li>
<li>Handling Java exceptions</li>
</ol>


<h3>1. Making use of a Java class and its methods:</h3>

<p>If a Java class is pure then without much effort, we can use that class in Frege. For example,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">Integer</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">pure</span>  <span class="n">native</span> <span class="n">abs</span>                                  <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span><span class='line'>    <span class="n">pure</span>  <span class="n">native</span> <span class="n">negate</span>                               <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span><span class='line'>    <span class="n">pure</span>  <span class="n">native</span> <span class="n">valueOf</span> <span class="n">java</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="kt">BigInteger</span><span class="o">.</span><span class="n">valueOf</span> <span class="ow">::</span> <span class="kt">Long</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span></code></pre></td></tr></table></div></figure>


<p>A Java class is declared with <code>data</code> declaration in Frege. The identifier after the <code>data</code> keyword
is the corresponding type for the Java class in Frege and the qualified Java class is identified after the <code>native</code>
keyword followed by the instance methods, static methods or even some Frege functions not defined in the
original Java class.</p>

<p>An important point here is that the instance methods on BigInteger take Integer as their
first argument which is the <code>this</code> reference on which the methods will be invoked.</p>

<p>Coming back to our original example, here
we are trying to use the mutable Java class <code>java.util.LinkedList</code>.
An obvious difference between this one and the <code>BigInteger</code> example is that the
functions now do not have the <code>pure</code> keyword in front.</p>

<p>The next difference is that the instance methods now cannot take the simple type like <code>LinkedList a</code> as we did for
<code>Integer</code> but the type is now <code>Mutable s (LinkedList a)</code> since it is not a pure function.
If we don&rsquo;t annotate a native function <code>pure</code> and we don&rsquo;t use <code>Mutable</code> to consume or return a mutable Object, it will be a
compilation error. Mutable objects can only be used in <code>ST</code> or <code>IO</code> actions so the return type
must be in ST or IO monad.</p>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html#add(E)">LinkedList.add()</a> method returns a boolean. Since
it is an impure function, it should be used in <code>ST</code> monad. Here the boolean itself is pure so it is just <code>ST s Bool</code>.
Take a look at the third function <code>new</code>, <code>LinkedList</code> constructor. This function is impure and it returns
a mutable object, a new <code>LinkedList</code> instance, so the return type is <code>ST s (Mutable s (LinkedList a))</code> for which the shorthand is <code>STMutable s (LinkedList a)</code>.</p>

<p>Here is an example for a native function not being part of a native
<code>data</code> declaration. This is useful when a native class is already
declared in Frege in some module but the function that we are looking
for is missing in the <code>data</code> declaration.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">pure</span> <span class="n">native</span> <span class="n">showThrowable</span> <span class="n">toString</span> <span class="ow">::</span> <span class="kt">Throwable</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>showThrowable</code> is the Frege function name for <code>Throwable.toString()</code>. Since it is an
instance method on <code>Throwable</code>, the first argument is of type
<code>Throwable</code> and then the formal arguments&#8217; types (in this case, none) and return type.</p>

<h3>2. Using a Java object in a Frege function</h3>

<p>A native <code>data</code> declaration doesn&rsquo;t have to just contain the native members, it can also have
additional Frege functions.
In our example, the function <code>fromFregeList</code> is not defined in
the Java class but it has been added as an utility function to create a <code>LinkedList</code> from a frege list.
Here again the same rule as in the previous section applies: To return a mutable Java object,
we should use <code>ST s (Mutable s TheJavaType)</code> which is nothing but <code>STMutable s TheJavaType</code>.</p>

<p>In the same way, the <code>plusTop</code> function takes a mutable Java object so the parameter type is
<code>Mutable s (LinkedList Int)</code>. Also since it consumes a mutable type, it must be in <code>ST</code> monad hence
the return type is <code>ST s (Maybe Int)</code> returning an <code>Maybe Int</code> in <code>ST</code>.</p>

<h3>3. Using Java Exceptions in functions</h3>

<p>To use a Java Exception class, it must be first defined in a Frege
module. It is the same as declaring native declaration for a Java class but
additionally we need to derive the <code>Exceptional</code> type class so that the exception can later be handled with
<code>catch</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">IndexOutOfBoundsException</span> <span class="ow">=</span> <span class="n">native</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="kt">IndexOutOfBoundsException</span>
</span><span class='line'>
</span><span class='line'><span class="nf">derive</span> <span class="kt">Exceptional</span> <span class="kt">IndexOutOfBoundsException</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exceptions can then be used in native declarations as in <code>get</code> function in our example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">native</span> <span class="n">get</span> <span class="ow">::</span> <span class="kt">Mutable</span> <span class="n">s</span> <span class="p">(</span><span class="kt">LinkedList</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span> <span class="n">throws</span>
</span><span class='line'>    <span class="kt">IndexOutOfBoundsException</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Handling Java exceptions</h3>

<p>In two ways, we can handle exceptions:</p>

<ol>
<li><p>Using <code>action `catch` handler1 `catch` handler2</code></p>

<p>The type of <code>catch</code> is <code>Exceptional β =&gt; ST γ α -&gt; (β-&gt;ST γ α) -&gt; ST γ α</code>.</p>

<p>Here the <code>action</code> is the code where an exception might be thrown
and the handlers <code>handler1</code> and <code>handler2</code> take an exception and
return another value in <code>ST</code> monad. The infix notation facilitates
adding multiple handlers with better readability. Further here the
<code>handler1</code> must be more specific(in terms of the types of the
exceptions being handled) than <code>handler2</code>. Also note that from <a href="https://github.com/Frege/frege/blob/master/frege/prelude/PreludeIO.fr#L116">Frege standard library</a> with respect to <code>catch</code>:</p>

<blockquote><p><strong>Note</strong> If <em>action</em> is of the form:
   <code>doSomething arg</code>
then, depending on the strictness of <code>doSomething</code> the argument <code>arg</code> may be evaluated
<strong>before</strong> the action is returned. Exceptions (i.e. undefined values)
that occur in the construction of the action do <strong>not</strong> count as
exceptions thrown during execution of it, and hence cannot be catched.</p>

<p>Example:
<code>println (head []) `catch`  ....</code></p>

<p>will not catch the exception that will be thrown when println evaluates</p>

<p>For a remedy, see <code>try</code>.</p></blockquote></li>
<li><p>Using <code>try</code></p>

<p>First, the type: <code>try :: Monad γ =&gt; (α-&gt; γ β) -&gt; α -&gt; γ β</code></p>

<p>Unlike <code>catch</code>, <code>try</code> takes a function that produces a monadic value. If
the function can throw an exception, it must result in an <code>ST</code>
monad which can then be passed to <code>catch</code> to handle those
exceptions. In our example, <code>\xs -&gt; plusTop xs &gt;&gt;= (println . maybe "Got a null pointer"
show)</code> is the function which when applied to a
<code>java.util.LinkedList</code> might throw a <code>NullPointerException</code> or
<code>IndexOutOfBoundsException</code>:</p></li>
</ol>


<figure class='code'><figcaption><span>Using try </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>    <span class="n">try</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">plusTop</span> <span class="n">xs</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="n">println</span> <span class="o">.</span> <span class="n">maybe</span> <span class="s">&quot;Got a null pointer&quot;</span> <span class="n">show</span><span class="p">))</span> <span class="n">javaList</span>
</span><span class='line'>        <span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">npe</span> <span class="ow">::</span> <span class="kt">NullPointerException</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">npe</span><span class="p">)</span>
</span><span class='line'>        <span class="n">catch</span><span class="p">`</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">exception</span> <span class="ow">::</span> <span class="kt">Exception</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">println</span> <span class="o">$</span> <span class="n">showThrowable</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Since the construction of action is deferred through a lambda
here, <code>try</code> eliminates the issue with <code>catch</code> mentioned in the above note.</p>

<h3>Extending a class or implementing an interface in Frege:</h3>

<p>One thing that is not shown in the example is extending a Java class
or implementing an interface in Frege. Unfortunately both are not possible in Frege
yet. There is a workaround though using a Java class which extends a
class or implements an interface but instead of an implementation on
its own, it just delegates to a Frege function. For example, see
<a href="https://github.com/Frege/frege/blob/master/frege/java/Lang.fr#L89">here</a>
for implementing <code>java.lang.Runnable</code> in Frege using a Java class
<a href="https://github.com/Frege/frege/blob/master/frege/runtime/SwingSupport.java#L56">frege.runtime.SwingSupport</a> which takes a Frege function and then
delegates to it in <code>run</code> method implementation.</p>

<p>This concludes our little experimentation calling Java from Frege. The
other interesting side, calling Frege from Java, is for a
future post.</p>
]]></content>
  </entry>
  
</feed>
